name: test-workflow x64

on: workflow_dispatch

env:
  SNAPMAIL_VERSION: 0.1.9

jobs:
  call-build-dna:
    uses: ./.github/workflows/build-dna.yml

  # upload the app package for each target os
  upload-assets:
    needs: call-build-dna
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      # Add Windows certificate
      ##- name: Add Windows certificate
      ##  if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
      ##  id: write_file
      ##  uses: timheuer/base64-to-file@v1
      ##  with:
      ##    fileName: 'win-certificate.pfx'
      ##    encodedString: ${{ secrets.CERTIFICATE_WINDOWS_PFX }}
      # Download previously uploaded artifacts and display them in logs
      - uses: actions/download-artifact@master
        with:
          name: snapmail-artifact
          path: bin
      - uses: actions/download-artifact@master
        with:
          name: zome-artifact
          path: bin
      - uses: actions/download-artifact@master
        with:
          name: snapmail-happ-artifact
          path: bin
      # Download snapmail-ui repo
      - name: Download snapmail-ui repo
        shell: bash # important because this runs shell scripts
        run: |
          npm run setup
      - name: list downloads
        continue-on-error: true
        run: ls -R
        working-directory: bin
      # Install nodejs dependencies
      - name: Install nodejs dependencies
        run: |
          npm install
          npm run install:ui
      # build snapmail-ui
      - name: build snapmail-ui
        shell: bash
        run: |
          npm run build-prod
      # install hc tool (linux)
      - name: Install hc tool and wasm target
        if: ${{ runner.os == 'Linux' }}
        shell: bash # important because this runs shell scripts
        run: |
          npm run install:hc
      # build webhapp (linux)
      - name: build webhapp
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          npm run dist:webhapp
      # Setup sign & notarize
      - name: Setup sign and notarize (macos only)
        if: ${{ runner.os == 'macOs' }}
        uses:  figleafteam/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.HBE_APPLE_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.HBE_APPLE_CERTIFICATE_PASS }}
      # Build installers and binaries
      - name: dist snapmail
        shell: bash
        env:
          #WIN_CSC_LINK: ${{ steps.write_file.outputs.filePath }}
          #WIN_CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}
          APPLE_DEV_IDENTITY: ${{ secrets.APPLE_DEV_IDENTITY }}
          APPLE_ID_EMAIL: ${{ secrets.APPLE_ID_EMAIL }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          DEBUG: electron-osx-sign*,electron-notarize*
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run dist:build
      # list out folder
      - name: list out-builder folder
        run: ls
        working-directory: out-builder
      # list bin folder
      - name: list bin folder
        run: ls
        working-directory: bin
      # upload binary for each platform
      - name: upload binary (ubuntu only)
        if: ${{ runner.os == 'Linux' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "workflow-test" "workdir/snapmail.webhapp" --clobber
          gh release upload "workflow-test" "out/Snapmail-$SNAPMAIL_VERSION.AppImage" --clobber
      - name: upload binary (macos only)
        if: ${{ runner.os == 'macOs' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "workflow-test" "out/Snapmail-$SNAPMAIL_VERSION.dmg" --clobber
      - name: upload binary (Windows only)
        if: ${{ runner.os == 'Windows' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "workflow-test" "out/Snapmail Setup $env:SNAPMAIL_VERSION.exe" --clobber
