name: Release x64

on:
  push:
    tags:
      - v[0-9]+.*


env:
  SNAPMAIL_VERSION: 0.1.5

jobs:
  # the create-release would be used once we want to create a specific release based on if the commit has a tag
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: taiki-e/create-gh-release-action@v1
        env:
          # (required)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build the dna
  call-build-dna:
    uses: ./.github/workflows/build-dna.yml

  # Build the UI, app and then package it each target os
  upload-assets:
    needs: call-build-dna
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      # Add Windows certificate
      ##- name: Add Windows certificate
      ##  if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
      ##  id: write_file
      ##  uses: timheuer/base64-to-file@v1
      ##  with:
      ##    fileName: 'win-certificate.pfx'
      ##    encodedString: ${{ secrets.CERTIFICATE_WINDOWS_PFX }}
      # rm the dna files from repository
      - name: clearing precompiled dna files
        continue-on-error: true
        run: |
          rm dna/*
      # Download previously uploaded artifacts and display them in logs
      - uses: actions/download-artifact@master
        with:
          name: snapmail-artifact
          path: dna
      - uses: actions/download-artifact@master
        with:
          name: zome-artifact
          path: dna
      - name: list downloads
        continue-on-error: true
        run: ls -R
        working-directory: dna
      # Download snapmail-ui repo
      - name: Download snapmail-ui repo
        shell: bash # important because this runs shell scripts
        run: |
          npm run setup
      # Install nodejs dependencies
      - name: Install nodejs dependencies
        run: |
          npm install
          npm run ui-install
      # build snapmail-ui
      - name: build snapmail-ui
        shell: bash
        run: |
          npm run build-prod
      # build holochain and lair
      - name: build holochain and lair
        shell: bash
        run: |
          npm run build-hc
      # Setup sign & notarize
      - name: Setup sign and notarize (macos only)
        if: ${{ runner.os == 'macOs' }}
        uses:  figleafteam/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.HBE_APPLE_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.HBE_APPLE_CERTIFICATE_PASS }}
      # Build installers and binaries
      - name: dist snapmail
        shell: bash
        env:
          #WIN_CSC_LINK: ${{ steps.write_file.outputs.filePath }}
          #WIN_CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}
          APPLE_DEV_IDENTITY: ${{ secrets.APPLE_DEV_IDENTITY }}
          APPLE_ID_EMAIL: ${{ secrets.APPLE_ID_EMAIL }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          DEBUG: electron-osx-sign*,electron-notarize*
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run dist-build
      # list out folder
      - name: list out folder
        run: ls
        working-directory: out
      # list bin folder
      - name: list bin folder
        run: ls
        working-directory: bin
      # upload binary for each platform
      - name: upload binary (ubuntu only)
        if: ${{ runner.os == 'Linux' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp bin/snapmail-lair-keystore bin/snapmail-lair-keystore-linux
          cp bin/snapmail-holochain bin/snapmail-holochain-linux
          gh release upload "${GITHUB_REF#refs/tags/}" "out/Snapmail-$SNAPMAIL_VERSION.AppImage" --clobber
          gh release upload "${GITHUB_REF#refs/tags/}" "bin/snapmail-lair-keystore-linux" --clobber
          gh release upload "${GITHUB_REF#refs/tags/}" "bin/snapmail-holochain-linux" --clobber
      - name: upload binary (macos only)
        if: ${{ runner.os == 'macOs' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp bin/snapmail-lair-keystore bin/snapmail-lair-keystore-mac
          cp bin/snapmail-holochain bin/snapmail-holochain-mac
          gh release upload "${GITHUB_REF#refs/tags/}" "out/Snapmail-$SNAPMAIL_VERSION.dmg" --clobber
          gh release upload "${GITHUB_REF#refs/tags/}" "bin/snapmail-lair-keystore-mac" --clobber
          gh release upload "${GITHUB_REF#refs/tags/}" "bin/snapmail-holochain-mac" --clobber
      - name: upload binary (Windows only)
        if: ${{ runner.os == 'Windows' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "$($env:GITHUB_REF -replace "refs/tags/")" "out/Snapmail Setup $env:SNAPMAIL_VERSION.exe" --clobber
          gh release upload "$($env:GITHUB_REF -replace "refs/tags/")" "bin/snapmail-lair-keystore.exe" --clobber
          gh release upload "$($env:GITHUB_REF -replace "refs/tags/")" "bin/snapmail-holochain.exe" --clobber
