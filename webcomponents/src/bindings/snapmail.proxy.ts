/* This file is generated by zits. Do not edit manually */

import {CAN_DM, CHUNK_MAX_SIZE, DIRECT_SEND_CHUNK_TIMEOUT_MS, DIRECT_SEND_TIMEOUT_MS, Directory, FILE_MAX_SIZE, REMOTE_ENDPOINT, SNAPMAIL_DEFAULT_COORDINATOR_ZOME_NAME, SNAPMAIL_DEFAULT_INTEGRITY_ZOME_NAME, SNAPMAIL_DEFAULT_ROLE_NAME, DeliveryState, DirectMessageProtocol, InMailState, LinkKind, MailState, OutMailState, RecipientKind, SignalProtocol, SnapmailEntry, AckMessage, AttachmentInfo, CommitPendingAckInput, CommitPendingMailInput, DeliveryConfirmation, DmPacket, FileChunk, FileManifest, FindManifestOutput, GetMailOutput, GetMissingAttachmentsInput, GetMissingChunksInput, Handle, HandleItem, InAck, InMail, Mail, MailItem, MailMessage, OutAck, OutMail, PendingAck, PendingMail, PubEncKey, ReceivedAck, SendMailInput, WriteManifestInput, ZomeManifestVec, } from './snapmail.types';
import {
/** types.ts */
HoloHash,
AgentPubKey,
DnaHash,
WasmHash,
EntryHash,
ActionHash,
AnyDhtHash,
ExternalHash,
KitsuneAgent,
KitsuneSpace,
HoloHashB64,
AgentPubKeyB64,
DnaHashB64,
WasmHashB64,
EntryHashB64,
ActionHashB64,
AnyDhtHashB64,
InstalledAppId,
Signature,
CellId,
DnaProperties,
RoleName,
InstalledCell,
Timestamp,
Duration,
HoloHashed,
NetworkInfo,
FetchPoolInfo,
/** hdk/action.ts */
SignedActionHashed,
RegisterAgentActivity,
ActionHashed,
ActionType,
Action,
NewEntryAction,
Dna,
AgentValidationPkg,
InitZomesComplete,
CreateLink,
DeleteLink,
OpenChain,
CloseChain,
Update,
Delete,
Create,
/** hdk/capabilities.ts */
CapSecret,
CapClaim,
GrantedFunctionsType,
GrantedFunctions,
ZomeCallCapGrant,
CapAccessType,
CapAccess,
CapGrant,
///** hdk/countersigning.ts */
//CounterSigningSessionData,
//PreflightRequest,
//CounterSigningSessionTimes,
//ActionBase,
//CounterSigningAgents,
//PreflightBytes,
//Role,
//CountersigningAgentState,
/** hdk/dht-ops.ts */
DhtOpType,
DhtOp,
getDhtOpType,
getDhtOpAction,
getDhtOpEntry,
getDhtOpSignature,
/** hdk/entry.ts */
EntryVisibility,
AppEntryDef,
EntryType,
EntryContent,
Entry,
/** hdk/record.ts */
Record as HcRecord,
RecordEntry as HcRecordEntry,
/** hdk/link.ts */
AnyLinkableHash,
ZomeIndex,
LinkType,
LinkTag,
RateWeight,
RateBucketId,
RateUnits,
Link,
/** api/admin/types.ts */
InstalledAppInfoStatus,
DeactivationReason,
DisabledAppReason,
StemCell,
ProvisionedCell,
ClonedCell,
CellType,
CellInfo,
AppInfo,
MembraneProof,
FunctionName,
ZomeName,
ZomeDefinition,
IntegrityZome,
CoordinatorZome,
DnaDefinition,
ResourceBytes,
ResourceMap,
CellProvisioningStrategy,
CellProvisioning,
DnaVersionSpec,
DnaVersionFlexible,
AppRoleDnaManifest,
AppRoleManifest,
AppManifest,
AppBundle,
AppBundleSource,
NetworkSeed,
ZomeLocation,
   } from '@holochain/client';

import {
/** Common */
DhtOpHashB64,
//DnaHashB64, (duplicate)
//AnyDhtHashB64, (duplicate)
DhtOpHash,
/** DnaFile */
DnaFile,
DnaDef,
Zomes,
WasmCode,
/** entry-details */
EntryDetails,
RecordDetails,
Details,
DetailsType,
EntryDhtStatus,
/** Validation */
ValidationStatus,
ValidationReceipt,
   } from '@holochain-open-dev/core-types';

import {ZomeProxy} from '@ddd-qc/lit-happ';
import {snapmailFunctionNames} from './snapmail.fn';

/**
 *
 */
export class SnapmailProxy extends ZomeProxy {
  static readonly DEFAULT_ZOME_NAME = "snapmail"
  static readonly FN_NAMES = snapmailFunctionNames
 
  async initCaps(): Promise<void> {
    return this.call('init_caps', null);
  }




  async receiveDm(dmPacket: DmPacket): Promise<DirectMessageProtocol> {
    return this.call('receive_dm', dmPacket);
  }

  async findManifest(dataHash: string): Promise<FindManifestOutput> {
    return this.call('find_manifest', dataHash);
  }

  async getAllManifests(): Promise<ZomeManifestVec> {
    return this.call('get_all_manifests', null);
  }

  async getChunk(chunkEh: EntryHash): Promise<string> {
    return this.call('get_chunk', chunkEh);
  }

  async getManifest(manifestAddress: AnyDhtHash): Promise<FileManifest> {
    return this.call('get_manifest', manifestAddress);
  }

  async getMissingAttachments(input: GetMissingAttachmentsInput): Promise<number> {
    return this.call('get_missing_attachments', input);
  }

  async getMissingChunks(input: GetMissingChunksInput): Promise<number> {
    return this.call('get_missing_chunks', input);
  }

  async writeChunk(inputChunk: FileChunk): Promise<EntryHash> {
    return this.call('write_chunk', inputChunk);
  }

  async writeManifest(input: WriteManifestInput): Promise<ActionHash> {
    return this.call('write_manifest', input);
  }

  async getEncKey(from: AgentPubKey): Promise<Uint8Array> {
    return this.call('get_enc_key', from);
  }

  async getMyEncKey(): Promise<Uint8Array> {
    return this.call('get_my_enc_key', null);
  }

  async testEncryption(to: AgentPubKey): Promise<void> {
    return this.call('test_encryption', to);
  }

  async findAgent(handle: string): Promise<AgentPubKey[]> {
    return this.call('find_agent', handle);
  }

  async getAllHandles(): Promise<HandleItem[]> {
    return this.call('get_all_handles', null);
  }

  async getHandle(agentId: AgentPubKey): Promise<string> {
    return this.call('get_handle', agentId);
  }

  async getMyHandle(): Promise<string> {
    return this.call('get_my_handle', null);
  }

  async getMyHandleHistory(initialHandleAddress: ActionHash): Promise<string[]> {
    return this.call('get_my_handle_history', initialHandleAddress);
  }

  async pingAgent(destination: AgentPubKey): Promise<boolean> {
    return this.call('ping_agent', destination);
  }

  async createEmptyHandle(): Promise<ActionHash> {
    return this.call('create_empty_handle', null);
  }

  async setHandle(newUsername: string): Promise<ActionHash> {
    return this.call('set_handle', newUsername);
  }

  async acknowledgeMail(inmailAh: ActionHash): Promise<EntryHash> {
    return this.call('acknowledge_mail', inmailAh);
  }

  async commitPendingAck(input: CommitPendingAckInput): Promise<ActionHash> {
    return this.call('commit_pending_ack', input);
  }

  async commitConfirmation(input: DeliveryConfirmation): Promise<ActionHash> {
    return this.call('commit_confirmation', input);
  }

  async checkAckInbox(): Promise<EntryHash[]> {
    return this.call('check_ack_inbox', null);
  }

  async checkMailInbox(): Promise<ActionHash[]> {
    return this.call('check_mail_inbox', null);
  }

  async deleteMail(ah: ActionHash): Promise<ActionHash | null> {
    return this.call('delete_mail', ah);
  }

  async getAllMails(): Promise<MailItem[]> {
    return this.call('get_all_mails', null);
  }

  async getAllUnacknowledgedInmails(): Promise<ActionHash[]> {
    return this.call('get_all_unacknowledged_inmails', null);
  }

  async getMail(ah: ActionHash): Promise<GetMailOutput> {
    return this.call('get_mail', ah);
  }

  async getOutmailState(outmailAh: ActionHash): Promise<OutMailState> {
    return this.call('get_outmail_state', outmailAh);
  }

  async getOutmailDeliveryState(outmailAh: ActionHash): Promise<Record<string, AgentPubKey>> {
    return this.call('get_outmail_delivery_state', outmailAh);
  }

  async hasAckBeenDelivered(inmailAh: ActionHash): Promise<boolean> {
    return this.call('has_ack_been_delivered', inmailAh);
  }

  async isOutackSent(outackAh: ActionHash): Promise<boolean> {
    return this.call('is_outack_sent', outackAh);
  }

  async requestAcks(): Promise<ActionHash[]> {
    return this.call('request_acks', null);
  }

  async resendOutacks(): Promise<ActionHash[]> {
    return this.call('resend_outacks', null);
  }

  async resendOutmails(): Promise<ActionHash[]> {
    return this.call('resend_outmails', null);
  }

  async commitInmail(inmail: InMail): Promise<ActionHash> {
    return this.call('commit_inmail', inmail);
  }

  async commitPendingMail(input: CommitPendingMailInput): Promise<ActionHash> {
    return this.call('commit_pending_mail', input);
  }

  async sendMail(input: SendMailInput): Promise<ActionHash> {
    return this.call('send_mail', input);
  }
}
