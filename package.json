{
  "name": "Snapmail",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/glassbeadsoftware/snapmail.git"
  },
  "workspaces": [
    "ui/apps/snapmail",
    "ui/lib",
    "we-applet",
    "electron"
  ],
  "scripts": {
    "version": "hc --version && holochain --version && lair-keystore --version",
    "ci:hc-install": "bash scripts/npm/install-hc-tools.sh",
    "clean": "bash scripts/npm/clean.sh",
    "setup": "bash scripts/npm/setup.sh",
    "install:hash-zome": "bash scripts/npm/install-hash-zome.sh",
    "dist:dna": "bash scripts/npm/dist-dna.sh",
    "hash-zome": "bash scripts/npm/hash-zome.sh",
    "build-dev": "bash scripts/build-ui.sh dev",
    "build-prod": "bash scripts/build-ui.sh prod",
    "build:ui-lib": "npm run build -w @snapmail/elements",
    "package:ui": "npm run build -w @snapmail/elements && npm run package -w snapmail-webapp",
    "start": "npm run dist:dna && npm run start:agent",
    "start:agent": "cross-env HC_PORT=33735 ADMIN_PORT=33736 concurrently \"npm run build:ui-lib\" \"npm run start:happ-proxied\" \"sleep 10 && npm run start -w snapmail-webapp\"",

    "start:happ": "RUST_LOG=warn echo \"pass\" | hc s --piped -f=44242 generate bin/snapmail.happ --run=33735 -a snapmail network mdns",
    "start:happ-proxied": "RUST_LOG=warn echo \"pass\" | hc s --piped -f=$ADMIN_PORT generate bin/snapmail.happ --run=$HC_PORT -a snapmail network --bootstrap https://bootstrap-staging.holo.host/ quic -p=kitsune-proxy://SYVd4CF3BdJ4DS7KwLLgeU3_DbHoZ34Y-qroZ79DOs8/kitsune-quic/h/165.22.32.11/p/5779/--",

    "old:start": "npm run build-prod && tsc && electron .",
    "old:start-no": "./node_modules/.bin/electron electron --no-sandbox --enable-logging",
    "electron": "tsc && electron .",
    "electron-dev": "tsc && set APP_DEV=true && electron . dev --no-sandbox",
    "alex": "tsc && ./node_modules/.bin/electron . alex --no-sandbox",
    "billy": "tsc && ./node_modules/.bin/electron . billy --no-sandbox",
    "camille": "tsc && ./node_modules/.bin/electron . camille --no-sandbox",

    "dist": "electron-builder",
    "dist:webhapp": "rm -f ui.zip && cd electron-ui && bestzip ../webhapp.workdir/ui.zip * && cd .. && hc web-app pack webhapp.workdir",
    "dist:publish": "set APP_DEV=false && electron-builder build --publish onTag",
    "dist:build": "set APP_DEV=false && electron-builder build",
    "dist:linux": "electron-builder --linux tar.gz",
    "dist:linux-app": "electron-builder --linux AppImage",
    "dist:mac": "electron-builder --mac",
    "dist:win": "set APP_DEV=false && electron-builder --win",
    "dist:arm64": "electron-builder --arm64 --linux tar.gz",
    "deploy-win": "set APP_DEV=false && electron-builder build --win --publish always",
    "deploy-mac": "electron-builder build --mac --publish always"
  }
}
