{
  "name": "Snapmail",
  "version": "0.4.0",
  "config": {
    "hc_version": "0.2.4",
    "zits_version": "1.12.0",
    "bin": "bin",
    "we_test_folder": "../we-electron"
  },
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/glassbeadsoftware/snapmail.git"
  },
  "workspaces": [
    "we-applet",
    "webcomponents",
    "webapp"
  ],
  "scripts": {
    "postinstall"         : "mkdir -p artifacts",
    "install:submodules"  : "bash scripts/npm/install-submodules.sh $npm_package_config_hc_version",
    "install:rust"        : "bash submodules/hc-prebuilt/install-rust.sh",
    "install:hash-zome"   : "bash submodules/hc-prebuilt/install-hash-zome.sh $npm_package_config_bin",
    "install:hc"          : "bash submodules/hc-prebuilt/install-hc-cli.sh $npm_package_config_bin $npm_package_config_hc_version",
    "install:zits"        : "cargo install zits --version $npm_package_config_zits_version",

    "version"             : "$npm_package_config_bin/hc --version && holochain --version && lair-keystore --version",
    "hash-zome"           : "bash submodules/hc-prebuilt/hash-zome.sh $npm_package_config_bin ./submodules/snapmail-rsm/target/wasm32-unknown-unknown/release/snapmail_model.wasm artifacts/snapmail_zome_hash.txt && cp artifacts/snapmail_zome_hash.txt electron/bin",

    "build:happ"          : "bash scripts/npm/dist-dna.sh $npm_package_config_bin && npm run hash-zome",

    "build:webapp"        : "npm run build -w webcomponents && npm run build -w webapp",

    "prepare-devtest"     : "npm run clean:agents && npm run build:happ && bash scripts/ts-bindings.sh && npm run build:webapp",
    "devtest"             : "npm run prepare-devtest && npm run start:mem",
    "devtest:we"          : "npm run prepare-devtest && npm run dist -w webapp && HAPP_BUILD_MODE='Debug' npm run devtest -w we-applet",
    "devtest:electron"    : "npm run prepare-devtest && npm run devtest -w electron",

    "prodtest"            : "npm run clean:agents && npm run dist -w webapp && HC_PORT=$(port) ADMIN_PORT=$(port) concurrently \"npm run new-sandbox:local\" \"sleep 8 && npm run start:ui -w webapp\"",
    "prodtest:electron"   : "npm run clean:agents && npm run build -w webcomponents && npm run dist -w webapp && npm run prodtest -w electron",

    "prodtest:we"          : "npm run dist:we && cross-env BOOT_PORT=$(port) SIGNAL_PORT=$(port) concurrently \"npm run serve:run\" \"cross-env AGENT_NUM=1 npm run prodtest:we-launch\"",
    "prodtest:we-launch"   : "/c/Users/damien/AppData/Local/Programs/org.lightningrodlabs.we-electron-alpha/lightningrodlabs-we \"-b http://127.0.0.1:$BOOT_PORT\" \"-s ws://127.0.0.1:$SIGNAL_PORT\" --dev-config we.prodtest.config.json --agent-num $AGENT_NUM",

    "new-sandbox:mem"     : "RUST_LOG=warn echo \"pass\" | $npm_package_config_bin/hc s --piped -f=$ADMIN_PORT generate artifacts/snapmail.happ --run=$HC_PORT -a snapmail network mem",
    "new-sandbox:local"   : "RUST_LOG=warn echo \"pass\" | $npm_package_config_bin/hc s --piped -f=$ADMIN_PORT generate artifacts/snapmail.happ --run=$HC_PORT -a snapmail network --bootstrap http://127.0.0.1:$BOOT_PORT webrtc ws://127.0.0.1:$SIGNAL_PORT",

    "start:mem"           : "cross-env HC_PORT=$(port) ADMIN_PORT=$(port) HAPP_BUILD_MODE='Debug' concurrently \"npm run build:watch -w webcomponents\" \"npm run new-sandbox:mem\" \"sleep 7 && npm run start:ui -w webapp\"",
    "start:local"         : "cross-env HC_PORT=$(port) ADMIN_PORT=$(port) HAPP_BUILD_MODE='Debug' concurrently \"npm run build:watch -w webcomponents\" \"npm run new-sandbox:local\" \"sleep 7 && npm run start:ui -w webapp\"",


    "serve"              : "cross-env BOOT_PORT=$(cat .hc_bootenv) SIGNAL_PORT=$(cat .hc_signalenv) npm run serve:run",
    "serve:run"          : "hc run-local-services --bootstrap-port $BOOT_PORT --signal-port $SIGNAL_PORT",
    "serve:save"         : "echo SIGNAL_PORT=$SIGNAL_PORT && echo $SIGNAL_PORT > .hc_signalenv && echo $BOOT_PORT > .hc_bootenv && echo BOOT_PORT=$BOOT_PORT",

    "restart"             : "HAPP_BUILD_MODE='Debug' HC_PORT=$(port) ADMIN_PORT=$(port) concurrently \"npm run restart:happ\" \"sleep 8 && npm run start:ui -w webapp\"",
    "restart:happ"        : "RUST_LOG=warn echo \"pass\" | $npm_package_config_bin/hc s --piped -f=$ADMIN_PORT run $SINDEX -p=$HC_PORT",
    "network"             : "npm run clean:agents && concurrently-repeat \"npm run start:local\"",

    "start:launcher"      : "echo pass | hc-launch --piped -n 1 artifacts/snapmail.webhapp network mdns",

    "dist:we"              : "npm run dist -w we-applet && npm run package:we && npm run cp:we",
    "package:we"          : "rm -rf artifacts/snapmail-we_applet-ui.zip & cd we-applet/dist && bestzip ../../artifacts/snapmail-we_applet-ui.zip * && cd ../.. && $npm_package_config_bin/hc web-app pack we-applet/webhapp.workdir -o artifacts/snapmail-we_applet.webhapp",
    "cp:we"                : "cp artifacts/snapmail-we_applet.webhapp $npm_package_config_we_test_folder/testing-applets",

    "dist:electron"       : "bash submodules/hc-prebuilt/copy-binaries.sh electron/bin && npm run dist:build -w electron",

    "package:webapp"      : "rm -rf artifacts/snapmail-webapp-ui.zip & cd webapp/dist && bestzip ../../artifacts/snapmail-webapp-ui.zip * && cd ../.. && $npm_package_config_bin/hc web-app pack webapp/webhapp.workdir -o artifacts/snapmail.webhapp",

    "update-version"      : "bash scripts/update-version-number.sh $npm_package_version",

    "dl-test-release"     : "rm -rf release & mkdir -p release & gh release download workflow-test -D release -R glassbeadsoftware/snapmail",

    "clean"               : "bash scripts/npm/clean.sh",
    "clean:npm"           : "bash scripts/npm/clean-npm.sh",
    "clean:agents"        : "rm -rf .hc*",
    "clean:all"           : "npm run clean:agents & npm run clean:npm & npm run clean"
  },
  "devDependencies": {
    "@types/ws": "^8.5.3",
    "bestzip": "^2.2.0",
    "concurrently": "^6.2.1",
    "concurrently-repeat": "^0.0.1",
    "cross-env": "^7.0.3",
    "new-port-cli": "^1.0.0",
    "tslib": "^2.4.0",
    "@lit/localize-tools": "^0.6.3",
    "typescript": "~5.2.0"
  },
  "dependencies": {
    "@holochain/client": "=0.16.7",
    "@ddd-qc/cell-proxy": "=0.20.8",
    "@ddd-qc/lit-happ": "=0.20.8",
    "@ddd-qc/profiles-dvm": "=0.20.7",
    "@ddd-qc/we-utils": "=0.21.1",
    "@lightningrodlabs/we-applet": "0.13.0",
    "@holochain-open-dev/core-types": "0.7.0",
    "@lit/context": "1.0.1",
    "@lit/localize": "0.12.1",
    "lit": "3.0.2"
  },
  "engines": {
    "npm": ">=7.0.0"
  }
}
