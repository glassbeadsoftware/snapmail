{"version":3,"file":"userSettings.js","sourceRoot":"","sources":["../src/userSettings.ts"],"names":[],"mappings":";;;AAAA,uCAAgC;AAChC,2CAA0C;AAE1C,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAGzB;;GAEG;AACH,MAAa,aAAa;IAKxB,YAAY,IAAQ;QAClB,sGAAsG;QACtG,sFAAsF;QACtF,gEAAgE;QAEhE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,CAAC;QAEnE,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC1D,CAAC;IAED,0DAA0D;IAC1D,GAAG,CAAC,GAAO;QACT,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAED,0BAA0B;IAC1B,GAAG,CAAC,GAAO,EAAE,GAAO;QAClB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QACrB,oEAAoE;QACpE,qFAAqF;QACrF,4GAA4G;QAC5G,6EAA6E;QAC7E,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACzD,CAAC;CACF;AA7BD,sCA6BC;AAGD;;;;GAIG;AACH,SAAS,iBAAiB,CAAC,QAAgB,EAAE,QAAa;IACxD,8GAA8G;IAC9G,2FAA2F;IAC3F,IAAI;QACF,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC9C;IAAC,OAAM,KAAK,EAAE;QACb,0EAA0E;QAC1E,OAAO,QAAQ,CAAC;KACjB;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,gBAAgB,CAAC,YAAoB,EAAE,aAAqB;IAC1E,eAAe;IACf,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,iBAAM,CAAC,iBAAiB,EAAE,CAAC,YAAY,CAAC;IAClE,IAAI,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;IACnD,IAAI,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;IAEtD,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;IAEnD,IAAI,YAAY,GAAG,IAAI,aAAa,CAAC;QACnC,8CAA8C;QAC9C,UAAU,EAAE,kBAAkB;QAC9B,WAAW,EAAE,yBAAa;QAC1B,QAAQ,EAAE;YACR,YAAY,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE,MAAM,EAAE,eAAe,EAAE;YAChE,aAAa,EAAE,KAAK;YACpB,cAAc,EAAE,EAAC,CAAC,EAAE,CAAC,EAAC;YACtB,iBAAiB,EAAE,KAAK;YACxB,SAAS,EAAE,KAAK;YAChB,OAAO,EAAE,SAAS;SACnB;KACF,CAAC,CAAC;IACH,OAAO,YAAY,CAAC;AACtB,CAAC;AAvBD,4CAuBC","sourcesContent":["import {screen} from \"electron\";\nimport {APP_DATA_PATH} from \"./constants\";\n\nconst path = require('path');\nconst fs = require('fs');\n\n\n/**\n * Object for handling/storing all user preferences\n */\nexport class SettingsStore {\n\n  path: string;\n  data: any /*Object*/;\n\n  constructor(opts:any) {\n    // Renderer process has to get `app` module via `remote`, whereas the main process can get it directly\n    // app.getPath('userData') will return a string of the user's app data directory path.\n    // const userDataPath = (app || remote.app).getPath('userData');\n\n    this.path = path.join(opts.storagePath, opts.configName + '.json');\n\n    this.data = parseSettingsFile(this.path, opts.defaults);\n  }\n\n  // This will just return the property on the `data` object\n  get(key:any) {\n    return this.data[key];\n  }\n\n  // ...and this will set it\n  set(key:any, val:any) {\n    this.data[key] = val;\n    // Wait, I thought using the node.js' synchronous APIs was bad form?\n    // We're not writing a server so there's not nearly the same IO demand on the process\n    // Also if we used an async API and our app was quit before the asynchronous write had a chance to complete,\n    // we might lose that data. Note that in a real app, we would try/catch this.\n    fs.writeFileSync(this.path, JSON.stringify(this.data));\n  }\n}\n\n\n/**\n *\n * @param filePath\n * @param defaults\n */\nfunction parseSettingsFile(filePath: string, defaults: any) {\n  // We'll try/catch it in case the file doesn't exist yet, which will be the case on the first application run.\n  // `fs.readFileSync` will return a JSON string which we then parse into a Javascript object\n  try {\n    return JSON.parse(fs.readFileSync(filePath));\n  } catch(error) {\n    // if there was some kind of error, return the passed in defaults instead.\n    return defaults;\n  }\n}\n\n/**\n *\n */\nexport function loadUserSettings(initialWidth: number, initialHeight: number): SettingsStore {\n  // Get Settings\n  const { width, height } = screen.getPrimaryDisplay().workAreaSize;\n  let starting_width = Math.min(width, initialWidth);\n  let starting_height = Math.min(height, initialHeight);\n\n  let x = Math.floor((width - starting_width) / 2);\n  let y = Math.floor((height - starting_height) / 2);\n\n  let userSettings = new SettingsStore({\n    // We'll call our data file 'user-preferences'\n    configName: 'user-preferences',\n    storagePath: APP_DATA_PATH,\n    defaults: {\n      windowBounds: { width: starting_width, height: starting_height },\n      canAutoLaunch: false,\n      windowPosition: {x, y},\n      dontConfirmOnExit: false,\n      canNotify: false,\n      lastUid: undefined,\n    }\n  });\n  return userSettings;\n}\n"]}