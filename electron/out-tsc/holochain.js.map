{"version":3,"file":"holochain.js","sourceRoot":"","sources":["../src/holochain.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path'\nimport { app } from 'electron'\nimport { ElectronHolochainOptions, StateSignal } from \"@lightningrodlabs/electron-holochain\"\nimport {DNA_PATH, DNA_VERSION_FILENAME, NETWORK_SETTINGS_FILENAME, SNAPMAIL_APP_ID} from './constants'\nimport {NetworkSettings} from \"./networkSettings\";\nimport fs from \"fs\";\nimport {log} from \"./logger\";\nimport {winPath} from \"./config\";\n\n/** Messages displayed on the splashscreen */\nexport enum StateSignalText {\n  IsFirstRun = 'Welcome to Snapmail...',\n  IsNotFirstRun = 'Loading...',\n  CreatingKeys = 'Creating cryptographic keys...',\n  RegisteringDna = 'Registering Profiles DNA to Holochain...',\n  InstallingApp = 'Installing DNA bundle to Holochain...',\n  EnablingApp = 'Enabling DNA...',\n  AddingAppInterface = 'Attaching API network port...',\n  UnknownState = 'Application is in an unknown state...',\n}\n\n\n/** */\nexport function stateSignalToText(state: StateSignal): StateSignalText {\n  switch (state) {\n    case StateSignal.IsFirstRun:\n      return StateSignalText.IsFirstRun\n    case StateSignal.IsNotFirstRun:\n      return StateSignalText.IsNotFirstRun\n    case StateSignal.CreatingKeys:\n      return StateSignalText.CreatingKeys\n    case StateSignal.RegisteringDna:\n      return StateSignalText.RegisteringDna\n    case StateSignal.InstallingApp:\n      return StateSignalText.InstallingApp\n    case StateSignal.EnablingApp:\n      return StateSignalText.EnablingApp\n    case StateSignal.AddingAppInterface:\n      return StateSignalText.AddingAppInterface\n  }\n  log('error', 'Unknown state: ' + JSON.stringify(state))\n  return StateSignalText.UnknownState\n}\n\n\n/** */\nexport function createHolochainOptions(uid: string, storagePath: string, networkSettings: NetworkSettings): ElectronHolochainOptions {\n  const keystorePath = path.join(storagePath, 'keystore-' + app.getVersion())\n  const datastorePath =  path.join(storagePath, 'databases-' + app.getVersion())\n\n  console.log('info', {__dirname});\n  //const startPath = path.join(__dirname, '..')\n  //const keystorePath = path.join(path.join(startPath, uid), 'keystore-' + app.getVersion())\n  //const datastorePath =  path.join(path.join(startPath, uid), 'databases-' + app.getVersion())\n\n  const backslash = \"\\u005C\"\n\n  const options: ElectronHolochainOptions = {\n    happPath: DNA_PATH,\n    datastorePath,\n    keystorePath,\n    //happPath: \"C:\\\\github\\\\snapmail\\\\electron\\\\bin\\\\snapmail.happ\\\\\",\n    //happPath: \"snapmail.happ\",\n    //happPath: DNA_PATH.replace(/\\\\/g, \"/\").replace(/:/g, \"\"),\n    //datastorePath: \"c/Users/damien/AppData/Roaming/Snapmail/users/default/toto/databases-0.1.9/\",\n    //keystorePath: \"c/Users/damien/AppData/Roaming/Snapmail/users/default/toto/keystore-0.1.9/\",\n    //datastorePath: datastorePath.replace(/\\\\/g, \"\\\\\"),\n    //keystorePath: keystorePath.replace(/\\\\/g, \"\\\\\"),\n    //datastorePath: datastorePath.replace(/\\\\/g, \"/\"),//.replace(/:/g, \"\"),\n    //keystorePath: keystorePath.replace(/\\\\/g, \"/\"),//.replace(/:/g, \"\"),\n    appId: SNAPMAIL_APP_ID + '-' + uid,\n    //appId: MAIN_APP_ID,\n    appWsPort: 0,\n    adminWsPort: 1235,\n    proxyUrl: networkSettings.proxyUrl,\n    bootstrapUrl: networkSettings.canProxy? networkSettings.bootstrapUrl : '',\n    passphrase: \"test-passphrase\",\n  }\n  //console.log('info', {keystorePath: options.keystorePath});\n  return options;\n}\n\n\n/** */\nexport function loadDnaVersion(sessionDataPath: string): string | undefined  {\n  let dnaVersion = undefined;\n  //const configFilePath = path.join(sessionDataPath, '../');\n  const configFilePath = path.join(sessionDataPath, DNA_VERSION_FILENAME);\n  try {\n    dnaVersion = fs.readFileSync(configFilePath).toString();\n  } catch(error) {\n    log(\"warn\", \"File not found ; \" + configFilePath)\n    return undefined;\n  }\n  return dnaVersion;\n}\n"]}