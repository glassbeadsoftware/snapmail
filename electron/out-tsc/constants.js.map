{"version":3,"file":"constants.js","sourceRoot":"","sources":["../src/constants.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path'\nimport { app } from 'electron';\nimport {getLairVersion, getRunnerVersion, PathOptions} from \"@lightningrodlabs/electron-holochain\"\n\nconsole.log({__dirname})\n\n/** DEBUGGING */\nexport const IS_DEBUG = process.env.DEV_MODE ? (process.env.DEV_MODE.trim() === 'dev') : false;\nexport const DEVELOPMENT_UI_URL = path.join(__dirname, '../web')\n\n/** MISC */\nexport const SNAPMAIL_APP_ID = 'snapmail-app'; // MUST MATCH SNAPMAIL_UI config\n/** A special log from the conductor specifying that the interfaces are ready to receive incoming connections */\n//export const HC_MAGIC_READY_STRING = 'Conductor ready.';\n//export const LAIR_MAGIC_READY_STRING = '#lair-keystore-ready#';\nexport const REPORT_BUG_URL = `https://github.com/glassbeadsoftware/snapmail/issues/new`;\n\n/** NETWORK */\nexport const DEFAULT_BOOTSTRAP_URL = 'https://bootstrap-staging.holo.host';\nexport const DEFAULT_PROXY_URL ='kitsune-proxy://SYVd4CF3BdJ4DS7KwLLgeU3_DbHoZ34Y-qroZ79DOs8/kitsune-quic/h/165.22.32.11/p/5779/--'\n//kitsune-proxy://VYgwCrh2ZCKL1lpnMM1VVUee7ks-9BkmW47C_ys4nqg/kitsune-quic/h/kitsune-proxy.harris-braun.com/p/4010/--';\n\n/** PATHS */\nexport const CONFIG_PATH = path.join(app.getPath('appData'), 'Snapmail');\n//export const STORAGE_PATH = path.join(CONFIG_PATH, 'storage');\nexport const UID_LIST_FILENAME = 'uid-list.txt';\nexport const NETWORK_SETTINGS_FILENAME = 'network-preferences.json';\nexport const CURRENT_DIR = path.join(__dirname, '..');\n//const DIST_DIR = IS_DEBUG? \"ui_dbg\" : \"ui\";\nexport const DIST_DIR = \"web\";\nexport const FAVICON_PATH = `/web/favicon.png`;\n\n\nexport const DNA_PATH = app.isPackaged\n  ? path.join(app.getAppPath(), '../app/bin/snapmail.happ')\n  : path.join(app.getAppPath(), 'bin/snapmail.happ')\n\n\n// export const APP_DATA_PATH = IS_DEBUG\n//   ? path.join(__dirname, '../../.dev-app-data')\n//   : path.join(app.getPath('appData'), 'Snapmail')\nexport const APP_DATA_PATH = path.join(app.getPath('appData'), 'Snapmail')\nexport const USER_DATA_PATH = path.join(APP_DATA_PATH, 'users');\n\n\n/**\n * in production must point to unpacked versions, not in an asar archive in development\n * fall back on defaults in the electron-holochain package\n */\nconst fileExt = process.platform === 'win32' ? '.exe' : '';\nexport const BINARY_PATHS: PathOptions | undefined = app.isPackaged\n  ? {\n    holochainRunnerBinaryPath: path.join(__dirname, `../../app/bin/holochain-runner${fileExt}`),\n    lairKeystoreBinaryPath: path.join(__dirname, `../../app/bin/lair-keystore${fileExt}`,),\n  }\n  : undefined;\n\n//console.log({BINARY_PATHS})\n\n/** Get Versions */\nexport const RUNNER_VERSION = getRunnerVersion(BINARY_PATHS?.holochainRunnerBinaryPath)\nexport const LAIR_VERSION = getLairVersion(BINARY_PATHS?.lairKeystoreBinaryPath)\n\n\n\nexport const DNA_VERSION_FILENAME = \"dna_version.txt\";\nexport const RUNNING_ZOME_HASH_FILEPATH = 'bin/zome_hash.txt';\n\n// export const HOLOCHAIN_BIN_NAME = 'snapmail-holochain';\n// export const LAIR_KEYSTORE_BIN_NAME  = 'snapmail-lair-keystore';\n// export const BIN_PATH = process.platform === \"win32\"? '' : './bin/';\n// export const FILE_EXT = process.platform === \"win32\"? '.exe' : ''\n//\n// export const HOLOCHAIN_BIN = BIN_PATH + HOLOCHAIN_BIN_NAME + FILE_EXT\n// export const LAIR_KEYSTORE_BIN = BIN_PATH + LAIR_KEYSTORE_BIN_NAME + FILE_EXT\n\n\n/** WEB FILES PATH */\nexport const BACKGROUND_COLOR = '#fbf9f7'\nexport const ICON_FILEPATH = path.join(CURRENT_DIR, \"/web/icon.png\")\nexport const LINUX_ICON_FILE = path.join(__dirname, '../web/icon.png')\nexport const SPLASH_FILE = path.join(__dirname, '../web/splashscreen.html')\nexport const MAIN_FILE = path.join(__dirname, '../web/index.html')\n/** HTML PAGES URLS */\nexport const NETWORK_URL = 'file://' + CURRENT_DIR + '/'+ DIST_DIR +'/networking.html';\nexport const ERROR_URL = 'file://' + CURRENT_DIR + '/'+ DIST_DIR +'/error.html';\nexport const INDEX_URL = 'file://' + CURRENT_DIR + '/'+ DIST_DIR +'/index.html?APP=';\n"]}