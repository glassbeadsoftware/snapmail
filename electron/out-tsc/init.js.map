{"version":3,"file":"init.js","sourceRoot":"","sources":["../src/init.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport {app, dialog} from \"electron\";\n\nimport {log} from \"./logger\";\n\n\n/** Prompt fatal error message */\nfunction fatalError(message: string, error?: any) {\n  log('error', message);\n  log('error', error);\n  dialog.showMessageBoxSync({\n    title: 'Snapmail: Fatal error',\n    buttons: ['exit'],\n    type: 'error',\n    message,\n    detail: JSON.stringify(error),\n  });\n  process.abort();\n}\n\n\n/** */\nexport function initApp(\n  userDataPath: string,\n  appDataPath: string,\n  dnaVersionFilename: string,\n  runningZomeHashFilePath: string,\n  uidListFilename: string,\n  ) {\n  /** Read zome_hash.txt in app folder */\n  const runningDnaHash = loadRunningZomeHash(runningZomeHashFilePath);\n  log('info', \"ZOME HASH: \" + runningDnaHash);\n\n  /** --  Create missing dirs -- **/\n  try {\n    if (!fs.existsSync(appDataPath)) {\n      log('info', \"Creating missing dir: \" + appDataPath);\n      fs.mkdirSync(appDataPath)\n    }\n    if (!fs.existsSync(userDataPath)) {\n      log('info', \"Creating missing dir: \" + userDataPath);\n      fs.mkdirSync(userDataPath)\n    }\n  } catch (e) {\n    fatalError(\"Failed to create data folders on disk\", e)\n  }\n\n  /** -- Determine Session ID -- **/\n  let sessionId;\n  if (process.argv.length > 2) {\n    sessionId = process.argv[2];\n  } else {\n    sessionId = 'default';\n  }\n\n  /** -- Setup storage folder -- **/\n  const sessionDataPath = path.join(userDataPath, sessionId);\n  log('info', {sessionDataPath});\n  setupSessionStorage(sessionDataPath, runningDnaHash!, dnaVersionFilename)\n\n  /** -- UID List -- **/\n  let uidList: string[] = []\n  try {\n    const uidListPath = path.join(sessionDataPath, uidListFilename);\n    log('debug', 'Reading file ' + uidListPath);\n    const uidListStr = fs.readFileSync(uidListPath).toString();\n    uidList = uidListStr.replace(/\\r\\n/g,'\\n').split('\\n');\n    uidList = uidList.filter(function (el) {return el !== '';});\n    log('debug', {uidList});\n  } catch(err) {\n    if(err.code === 'ENOENT') {\n      log('warn', 'File not found: ' + err);\n    } else {\n      log('warn','Loading config file failed: ' + err);\n    }\n    log('warn','continuing...');\n  }\n  // if (uidList.length == 0) {\n  //   uidList.push(INITIAL_UID)\n  // }\n\n  //// -- Determine final conductor config file path -- //\n  //g_configPath = path.join(g_storagePath, CONDUCTOR_CONFIG_FILENAME);\n  //log('debug', {g_configPath});\n  //let g_appConfigPath = path.join(g_storagePath, APP_CONFIG_FILENAME);\n\n  /** Done */\n  return {sessionDataPath, uidList}\n}\n\n\n/** */\nfunction setupSessionStorage(sessionPath: string, dnaHash: string, dnaVersionFilename: string) {\n  const dna_version_txt = path.join(sessionPath, dnaVersionFilename);\n  // Create storage and setup if none found\n  if (!fs.existsSync(sessionPath)) {\n    log('info', \"Creating missing dir: \" + sessionPath);\n    try {\n      fs.mkdirSync(sessionPath)\n      fs.writeFileSync(dna_version_txt, dnaHash, 'utf-8');\n    } catch(e) {\n      fatalError(\"Failed to setup storage folder on disk\", e)\n    }\n  } else {\n    /** Make sure its a compatible version */\n    let storedDnaHash = '<not found>';\n    try {\n      log('debug', 'Reading: ' + dna_version_txt);\n      storedDnaHash = fs.readFileSync(dna_version_txt, 'utf-8');\n    } catch (e) {\n      log('error', 'Failed to read the dna_version_txt file !');\n      log('error', e);\n    }\n    if (storedDnaHash !== dnaHash) {\n      const msg = \"The data found on disk is for a different version of Snapmails's core:\\n\" +\n        '  Stored data version: ' + storedDnaHash + '\\n' +\n        'This running version: ' + dnaHash;\n      log('error', msg);\n      const canErase = promptVersionMismatch(msg);\n      if (canErase) {\n        try {\n          fs.rmdirSync(sessionPath, {recursive: true});\n          /* Start over */\n          setupSessionStorage(sessionPath, dnaHash, dnaVersionFilename);\n        } catch (e) {\n          fatalError('Failed erasing current stored data', e);\n        }\n      }\n    }\n  }\n}\n\n\n/** */\nexport function addUidToDisk(newUid: string, sessionDataPath: string, uidListFilename: string,): boolean {\n  //log('info','addUidToDisk(): ' + newUid);\n  //log('info','addUidToDisk() sessionDataPath = ' + sessionDataPath);\n  const uidListPath = path.join(sessionDataPath, uidListFilename);\n  try {\n    fs.appendFileSync(uidListPath, newUid + '\\n');\n  } catch (err) {\n    log('error','Writing to file failed: ' + err);\n    return false;\n  }\n  return true;\n}\n\n\n\n/**\n * @returns dnaHash\n */\nfunction loadRunningZomeHash(runningZomeHashFilePath: string) {\n  log('debug', 'loadRunningZomeHash: ' + runningZomeHashFilePath)\n  if(fs.existsSync(runningZomeHashFilePath)) {\n    return fs.readFileSync(runningZomeHashFilePath, 'utf-8');\n  }\n  if(fs.existsSync('resources/app/' + runningZomeHashFilePath)) {\n    return fs.readFileSync('resources/app/' + runningZomeHashFilePath, 'utf-8');\n  }\n  if(fs.existsSync(app.getAppPath() + '/' + runningZomeHashFilePath)) {\n    return fs.readFileSync(app.getAppPath() + '/' + runningZomeHashFilePath, 'utf-8');\n  }\n  fatalError(\"Corrupt installation. Missing zome hash file.\");\n}\n\n\n/**\n * Return true if user wants to erase stored data\n */\nfunction promptVersionMismatch(message: string) {\n  const result = dialog.showMessageBoxSync({\n    title: `${app.getName()} - v${app.getVersion()}`,\n    message: `Version mismatch`,\n    detail: message,\n    type: \"warning\",\n    defaultId: 0,\n    buttons: ['Erase stored data', 'Continue anyway', 'Exit'],\n  });\n  switch (result) {\n    case 0: {\n      return true;\n      break;\n    }\n    case 1: {\n      return false;\n      break;\n    }\n    case 2: {\n      app.exit();\n      break;\n    }\n    default:\n      break;\n  }\n  return false;\n}\n"]}