{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["/** Public Modules */\nimport * as path from 'path'\nimport {\n  app, BrowserWindow, Menu, shell, Tray, Notification,\n  nativeImage, globalShortcut, dialog,\n  MenuItemConstructorOptions, RelaunchOptions\n} from 'electron';\nimport prompt from 'electron-prompt';\nimport AutoLaunch from 'auto-launch';\nimport { autoUpdater } from 'electron-updater';\nimport IS_DEV from 'electron-is-dev';\n\n/** Holochain Modules */\n\n//import {AdminWebsocket} from \"@holochain/client\";\n//import {CellId} from \"@holochain/client\";\n\nimport initAgent, {\n  StateSignal,\n  STATUS_EVENT,\n  APP_PORT_EVENT,\n  ERROR_EVENT,\n  HOLOCHAIN_RUNNER_QUIT,\n  LAIR_KEYSTORE_QUIT,\n} from \"@lightningrodlabs/electron-holochain\"\n\n/** My Modules */\nimport {\n  UID_LIST_FILENAME,\n  CONFIG_PATH,\n  CURRENT_DIR,\n  REPORT_BUG_URL,\n  NETWORK_URL,\n  INDEX_URL,\n  IS_DEBUG,\n  ICON_FILEPATH,\n  BACKGROUND_COLOR,\n  LINUX_ICON_FILE,\n  SPLASH_FILE,\n  DEVELOPMENT_UI_URL,\n  USER_DATA_PATH,\n  APP_DATA_PATH,\n  DNA_VERSION_FILENAME,\n  RUNNING_ZOME_HASH_FILEPATH,\n  MAIN_FILE,\n  BINARY_PATHS,\n  RUNNER_VERSION, LAIR_VERSION, DEFAULT_BOOTSTRAP_URL, DEFAULT_PROXY_URL, FAVICON_PATH\n} from './constants';\nimport { log, electronLogger } from './logger';\nimport { pingBootstrap } from \"./spawn\";\n\nimport {loadUserSettings, SettingsStore} from './userSettings'\nimport {addUidToDisk, initApp} from \"./init\";\nimport {createHolochainOptions, loadDnaVersion, stateSignalToText} from \"./holochain\";\nimport {NetworkSettings} from \"./networkSettings\";\nimport {loadNetworkConfig, saveNetworkConfig} from \"./networkSettings\";\nimport MenuItem = Electron.MenuItem;\n\n\n/**********************************************************************************************************************/\n/*  PRE-INIT\n/**********************************************************************************************************************/\n\nrequire('electron-context-menu')();\nrequire('fix-path')();\n\n/** Set holochain logging output level */\nprocess.env.WASM_LOG=\"WARN\";\nprocess.env.RUST_LOG=\"WARN\";\n\n/** Determine platform */\nlet IS_LINUX = false\nif (process.platform !== \"win32\" && process.platform !== 'darwin') {\n  // TODO: check for android?\n  IS_LINUX = true\n}\n\n/** Add Holochain bins to PATH for windows */\nif (process.platform === \"win32\") {\n  const BIN_PATH = path.join(CURRENT_DIR, \"bin\");\n  log('debug', 'BIN_PATH = ' + BIN_PATH);\n  process.env.PATH += ';' + BIN_PATH;\n}\n\n\n/**********************************************************************************************************************/\n/*  GLOBALS\n/**********************************************************************************************************************/\n\n/** STATE */\n/**\n * Keep a global reference of the ELECTRON window object, if you don't,\n * the window will be closed automatically when the JavaScript object is garbage collected.\n */\nlet g_mainWindow: BrowserWindow | null = null;\nlet g_tray: Tray | null = null;\nlet g_updater: MenuItem | null = null;\n// let g_holochain_proc = undefined;\n// let g_keystore_proc = undefined;\n// let g_adminWs: AdminWebsocket = undefined;\n// let g_cellId: CellId = undefined;\nlet g_canQuit = false;\nlet g_uid = '';\n\n\n/** */\nlet g_sessionDataPath: string;\n//let g_runner_version = 'holochain runner version (unknown)'\n//let g_lair_version = 'lair version (unknown)'\nlet g_statusEmitter = undefined;\nlet g_shutdown:any = undefined; // FIXME\n\nlet g_startingHandle: string;\n\n\n/** values retrieved from holochain */\nlet g_appPort = '';\nlet g_dnaIdB64: string;\nlet g_dnaVersion: string | undefined;\n\n/** Settings */\nlet g_userSettings: SettingsStore;\nlet g_uidList: string[] = [];\nlet g_networkSettings: NetworkSettings = {\n  canProxy: true,\n  canMdns: false,\n  bootstrapUrl: DEFAULT_BOOTSTRAP_URL,\n  proxyUrl: DEFAULT_PROXY_URL,\n}\n\n\n/**********************************************************************************************************************/\n/*  SETUP\n/**********************************************************************************************************************/\n\n/** -- Check AutoLaunch -- */\n\nconst autoLauncher = new AutoLaunch({\n  name: \"Snapmail happ\",\n  isHidden: true,\n});\n\n\n/**********************************************************************************************************************/\n/*  auto-update\n/**********************************************************************************************************************/\n\nautoUpdater.autoDownload = false;\n//autoUpdater.logger = require(\"electron-log\")\n//autoUpdater.logger.transports.file.level = \"info\"\n\nautoUpdater.on('error', (error:any) => {\n  dialog.showErrorBox('Error: ', error == null ? \"unknown\" : (error.stack || error).toString());\n})\n\nautoUpdater.on('update-available', (info:any) => {\n  dialog.showMessageBox({\n    type: 'info',\n    title: 'Found Update',\n    message: 'A software update has been found (v' + info.version + '), do you want to update now?',\n    buttons: ['Yes', 'No']\n  }).then((buttonIndex) => {\n    if (buttonIndex.response === 0) {\n      autoUpdater.downloadUpdate().then((paths:any) => {log('debug', 'download array: ' + JSON.stringify(paths))});\n    }\n    else {\n      g_updater!.enabled = true;\n      g_updater = null;\n    }\n  });\n})\n\n\n// autoUpdater.on('download-progress', (progress, bytesPerSecond, percent, total, transferred) => {\n//   let append = ' - ' + progress + '%';\n//   //let append = ' - ' + JSON.stringify(progress);\n//   log('debug', 'download-progress: ' + JSON.stringify(progress))\n//\n//   g_tray.setToolTip('SnapMail v' + app.getVersion() + append);\n// })\n\nautoUpdater.on('update-not-available', () => {\n  dialog.showMessageBox({\n    title: 'No Update found',\n    message: 'Current version is up-to-date.'\n  });\n  g_updater!.enabled = true;\n  g_updater = null;\n})\n\nautoUpdater.on('update-downloaded', () => {\n  dialog.showMessageBox({\n    title: 'Install Update',\n    message: 'Update downloaded, application will terminate and perform update...'\n  }).then(() => {\n    setImmediate(() => autoUpdater.quitAndInstall())\n  })\n})\n\n/** export this to MenuItem click callback */\nfunction checkForUpdates(menuItem: MenuItem, /*_focusedWindow, _event*/): void {\n  if(IS_DEBUG || IS_DEV) {\n    dialog.showMessageBox({\n      title: 'Check for Update failed',\n      message: 'No update available in dev mode.'\n    }).then(() => {});\n  } else {\n    if(IS_LINUX) {\n      dialog.showMessageBox({\n        title: 'Update unavailable',\n        message: 'auto-update not available on linux. Please check and download latest version \\\n        from github: https://github.com/glassbeadsoftware/snapmail/releases'\n      }).then(() => {});\n    } else {\n      g_updater = menuItem;\n      g_updater.enabled = false;\n      autoUpdater.checkForUpdates();\n    }\n  }\n}\n\n\n/**********************************************************************************************************************/\n/*  IPC between UI and Main\n/**********************************************************************************************************************/\n\nconst ipc = require('electron').ipcMain;\n\n// ipc.on('app_version', (event) => {\n//   event.sender.send('app_version', { version: app.getVersion() });\n// });\n\n\nipc.on('startingInfo', async (event, startingHandle, dnaHash) => {\n  g_startingHandle = startingHandle;\n  g_dnaIdB64 = Buffer.from(dnaHash).toString('base64')\n  log('info', \"startingHandle = \" + startingHandle);\n  //log('info', \"dnaHash = \" + g_dnaHash);\n  let firstUsername = \"<noname>\";\n  if (g_startingHandle === \"<noname>\") {\n    firstUsername = await promptFirstHandle();\n    //await ipc.call(\"setHandle\", firstUsername)\n    log('info', \"firstUsername set: \" + firstUsername);\n  }\n  event.returnValue = firstUsername;\n});\n\n\n/**\n * Receive synchronous notification\n * Launch Notification if allowed\n */\nipc.on('newMailSync', (event, title, body) => {\n  const canNotify = g_userSettings.get('canNotify');\n  //log('debug', \"canNotify = \" + canNotify);\n  if(canNotify) {\n    new Notification({ title, body }).show();\n  }\n  event.returnValue = canNotify;\n});\n\n\n/**\n * Receive asynchronous new mail counter\n * Update sys tray title\n */\nipc.on('newCountAsync', (event, newCount) => {\n  const append = newCount === 0 ? '' : ' (' + newCount + ')';\n  if (g_tray) {\n    g_tray.setToolTip('SnapMail v' + app.getVersion() + append);\n  }\n  event.returnValue = true;\n});\n\nipc.on('exitNetworkStatus', (event) => {\n  const indexUrl = INDEX_URL + g_appPort + '&UID=' + g_uid;\n  g_mainWindow?.loadURL(indexUrl)\n})\n\n\n/**\n * Receive and reply to asynchronous message\n */\nipc.on('bootstrapStatus', (event) => {\n  const succeeded = pingBootstrap(g_networkSettings.bootstrapUrl);\n  event.sender.send('bootstrapStatusReply', g_networkSettings.bootstrapUrl, succeeded);\n});\n\nipc.on('networkInfo', async (event) => {\n  console.log(\"*** RECEIVED networkInfo request\")\n\n  // const dump = await g_adminWs.dumpState({cell_id: g_cellId});\n  // const dht_dump = dump[0].integration_dump;\n  // console.log({dht_dump})\n  // const peer_dump = dump[0].peer_dump;\n  //console.log({peer_dump})\n  //console.log(JSON.stringify(peer_dump))\n  const peer_count = 42; // FIXME peer_dump.peers.length;\n  event.sender.send('networkInfoReply', peer_count, g_networkSettings);\n});\n\n\n// function showNotification () {\n//   const NOTIFICATION_TITLE = 'Basic Notification'\n//   const NOTIFICATION_BODY = 'Notification from the Main process'\n//   new Notification({ title: NOTIFICATION_TITLE, body: NOTIFICATION_BODY }).show()\n// }\n\n\n/**********************************************************************************************************************/\n/*  Functions\n/**********************************************************************************************************************/\n\n\n/** */\nfunction delay(ms:number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\n/** Create sys tray electron object */\nfunction createTray(): Tray {\n  let tray;\n  try {\n    tray = new Tray('web/favicon.png');\n  } catch(e) {\n    try {\n      tray = new Tray('resources/app/web/favicon.png');\n    } catch(e) {\n      try {\n        tray = new Tray(app.getAppPath() + '/web/favicon.png');\n      } catch(e) {\n        log('error', \"Could not find favicon. appPath: \" + app.getAppPath());\n        tray = new Tray(nativeImage.createEmpty());\n      }\n    }\n  }\n  return tray;\n}\n\n\n/** */\nfunction updateAutoLaunchSetting(canAutoLaunch: boolean | undefined): void {\n  if (canAutoLaunch === undefined) {\n    canAutoLaunch = g_userSettings.get('canAutoLaunch');\n  }\n  g_userSettings.set('canAutoLaunch', canAutoLaunch);\n  if (canAutoLaunch) {\n    autoLauncher.enable();\n  } else {\n    autoLauncher.disable();\n  }\n}\n\n\n/** */\nfunction updateNotificationSetting(canNotify: boolean): void {\n  if (canNotify === undefined) {\n    canNotify = g_userSettings.get('canNotify');\n  }\n  g_userSettings.set('canNotify', canNotify);\n}\n\n\n\n/**\n *\n */\nconst createSplashWindow = (): BrowserWindow => {\n  /** Create the browser window */\n  const splashWindow = new BrowserWindow({\n    height: 450,\n    width: 850,\n    center: true,\n    resizable: false,\n    frame: false,\n    show: false,\n    backgroundColor: BACKGROUND_COLOR,\n    webPreferences: {\n      contextIsolation: false,\n      nodeIntegration: true,\n      devTools: true,\n      webgl: false,\n      sandbox: false,\n      enableWebSQL: false,\n    },\n    icon: process.platform === 'linux'? LINUX_ICON_FILE : ICON_FILEPATH,\n  })\n    /** once its ready to show, show */\n    splashWindow.once('ready-to-show', () => {\n      log(\"debug\", 'ready-to-show');\n      splashWindow.show()\n    })\n  // /** Things to setup at start */\n  // let { x, y } = g_userSettings.get('windowPosition');\n  // splashWindow.setPosition(x, y);\n\n  /** and load it */\n  if (app.isPackaged) {\n    splashWindow.loadFile(SPLASH_FILE)\n  } else {\n    /** development */\n    //splashWindow.webContents.openDevTools();\n    splashWindow.loadURL(`${DEVELOPMENT_UI_URL}/splashscreen.html`)\n  }\n\n  /** Done */\n  return splashWindow\n}\n\n\n\n/**\n *\n */\nconst createMainWindow = async (appPort: string): Promise<BrowserWindow> => {\n  /** Create the browser window */\n  const { width, height } = g_userSettings.get('windowBounds');\n  const title = \"Snapmail v\" + app.getVersion() + \" - \" + g_uid\n  const options: Electron.BrowserWindowConstructorOptions = {\n    height,\n    width,\n    title: IS_DEBUG? \"[DEBUG] \" + title : title,\n    show: false,\n    backgroundColor: BACKGROUND_COLOR,\n    // use these settings so that the ui can check paths\n    webPreferences: {\n      contextIsolation: false,\n      sandbox: false,\n      nodeIntegration: true,\n      devTools: true,\n      webgl: false,\n      enableWebSQL: false,\n    },\n    icon: process.platform === 'linux'? LINUX_ICON_FILE : ICON_FILEPATH,\n  }\n  let mainWindow: BrowserWindow | null = new BrowserWindow(options)\n\n  /** Things to setup at start */\n  const { x, y } = g_userSettings.get('windowPosition');\n  mainWindow.setPosition(x, y);\n\n  globalShortcut.register('f5', function() {\n    //console.log('f5 is pressed')\n    mainWindow?.reload()\n  })\n\n  if (IS_DEBUG) {\n    mainWindow.webContents.openDevTools();\n  }\n\n  /** load the index.html of the app */\n  let mainUrl = app.isPackaged? MAIN_FILE : path.join(DEVELOPMENT_UI_URL, \"index.html\")\n  mainUrl += \"?APP=\" + appPort + \"&UID=\" + g_uid\n  log('info', \"createMainWindow ; mainUrl = \" + mainUrl)\n  try {\n    await mainWindow.loadURL(\"file://\" + mainUrl)\n  } catch(err) {\n    log('error', 'loadURL() failed:');\n    log('error', err);\n  }\n\n  /** Open <a href='' target='_blank'> with default system browser */\n  mainWindow.webContents.on('new-window', function (event, url) {\n    event.preventDefault()\n    log('info', \"new-window ; open: \" + url)\n    shell.openExternal(url).then(_r => {});\n  })\n  /** once its ready to show, show */\n  mainWindow.once('ready-to-show', () => {\n    mainWindow?.show()\n  })\n\n  mainWindow.on('resize', () => {\n    // The event doesn't pass us the window size,\n    // so we call the `getBounds` method which returns an object with\n    // the height, width, and x and y coordinates.\n    const { width, height } = mainWindow!.getBounds();\n    // Now that we have them, save them using the `set` method.\n    g_userSettings.set('windowBounds', { width, height });\n  });\n\n  /** Save position on close */\n  mainWindow.on('close', async (event) => {\n    const positions = mainWindow!.getPosition();\n    g_userSettings.set('windowPosition', { x: Math.floor(positions[0]), y: Math.floor(positions[1]) });\n    if (g_canQuit) {\n      log('info', 'WINDOW EVENT \"close\" -> canQuit')\n      //await tryToShutdown();\n      mainWindow = null;\n    } else {\n      event.preventDefault();\n      mainWindow!.hide();\n    }\n  })\n\n  /** Emitted when the window is closed. */\n  mainWindow.on('closed', async function () {\n    log('info', 'WINDOW EVENT \"closed\"');\n    //await tryToShutdown();\n    // /** Wait for kill subprocess to finish on slow machines */\n    // let start = Date.now();\n    // let diff = 0;\n    // do {\n    //   diff = Date.now() - start;\n    // } while(diff < 1000);\n    // log('info', '*** Holochain Closed\\n');\n    /**\n     * Dereference the window object, usually you would store windows\n     * in an array if your app supports multi windows, this is the time\n     * when you should delete the corresponding element.\n     */\n    g_mainWindow = null;\n    // g_statusEmitter = null;\n  });\n\n  /** Done */\n  return mainWindow\n}\n\n\n\n//\n// /** Create the main window global */\n// function createWindow(): BrowserWindow {\n//   const { width, height } = g_userSettings.get('windowBounds');\n//   let title = \"Snapmail v\" + app.getVersion() + \" - \" + g_uid\n//   let mainWindow = new BrowserWindow({\n//     width,\n//     height,\n//     title,\n//     webPreferences: {\n//       nodeIntegration: true,\n//       contextIsolation: false,\n//       devTools: true,\n//       webgl: false,\n//       enableWebSQL: false,\n//     },\n//     icon: ICON_FILEPATH,\n//     //autoHideMenuBar: true,\n//   });\n//   const { x, y } = g_userSettings.get('windowPosition');\n//   mainWindow.setPosition(x, y);\n//\n//   globalShortcut.register('f5', function() {\n//     //console.log('f5 is pressed')\n//     mainWindow.reload()\n//   })\n//\n//   if (IS_DEBUG) {\n//     mainWindow.webContents.openDevTools();\n//   }\n//\n//   /**\n//    * The BrowserWindow class extends the node.js core EventEmitter class, so we use that API\n//    * to listen to events on the BrowserWindow. The resize event is emitted when the window size changes.\n//    */\n//   mainWindow.on('resize', () => {\n//     /** The event doesn't pass us the window size,\n//      * so we call the `getBounds` method which returns an object with\n//      * the height, width, and x and y coordinates.*/\n//     const { width, height } = mainWindow.getBounds();\n//     /** Now that we have them, save them using the `set` method. */\n//     g_userSettings.set('windowBounds', { width, height });\n//   });\n//\n//   // Open <a href='' target='_blank'> with default system browser\n//   mainWindow.webContents.on('new-window', function (event, url) {\n//     event.preventDefault();\n//     shell.openExternal(url).then(_r => {});\n//   });\n//\n//   /** Open DevTools */\n//   if (IS_DEBUG) mainWindow.webContents.openDevTools();\n//\n//   /** Emitted on request to close window */\n//   mainWindow.on('close', (event) => {\n//     log('debug', '*** mainWindow \"close\" - ' + g_canQuit);\n//     const positions = mainWindow.getPosition();\n//     g_userSettings.set('windowPosition', { x: Math.floor(positions[0]), y: Math.floor(positions[1]) });\n//     if (g_canQuit) {\n//       mainWindow = null;\n//     } else {\n//       event.preventDefault();\n//       mainWindow.hide();\n//     }\n//   })\n//\n//   /** Emitted when the window is closed. */\n//   mainWindow.on('closed', function () {\n//     log('debug', '*** mainWindow \"closed\"');\n//     try {\n//       killHolochain().then(() => {\n//         log('info', '*** Holochain promise Closed');\n//       });\n//     } catch (err) {\n//       log('error', '*** Error while closing Holochain:');\n//       log('error', err);\n//     }\n//     /** Wait for kill subprocess to finish on slow machines */\n//     const start = Date.now();\n//     let diff = 0;\n//     do {\n//       diff = Date.now() - start;\n//     } while(diff < 1000);\n//     log('info', '*** Holochain Closed');\n//     /**\n//      * Dereference the window object, usually you would store windows\n//      * in an array if your app supports multi windows, this is the time\n//      * when you should delete the corresponding element.\n//      */\n//     g_mainWindow = null;\n//   });\n//\n//   //// Check for update\n//   //mainWindow.once('ready-to-show', () => {\n//   //  autoUpdater.checkForUpdatesAndNotify();\n//   //});\n//\n//   /** Done */\n//   return mainWindow;\n// }\n\n\n\n//\n// /** */\n// async function spawnHolochainProc(): Promise<ChildProcessWithoutNullStreams> {\n//   log('debug','spawnHolochainProc...');\n//   const bin = HOLOCHAIN_BIN;\n//   const args = ['-c', g_conductorConfigFilePath];\n//\n//   /** Spawn \"holochain\" subprocess */\n//   log('info', 'Spawning ' + bin + ' (dirname: ' + CURRENT_DIR + ') | spawnHolochainProc()');\n//   const holochain_proc = spawn(bin, args, {\n//     cwd: CURRENT_DIR,\n//     detached: false,\n//     //stdio: 'pipe',\n//     env: {\n//       ...process.env,\n//       RUST_BACKTRACE: \"1\",\n//     },\n//   });\n//   if (!holochain_proc) {\n//     throw new Error(\"Failed to spawn holochain's magic ready string from child process\");\n//   }\n//   /** Handle error output */\n//   holochain_proc.stderr.on('data', (data) => log('error', '*** holochain > ' + data.toString()));\n//   /** if \"holochain\" exit, close the app */\n//   holochain_proc.on('exit', (code, signal) => {\n//     if (signal) {\n//       log('info', `holochain process terminated due to receipt of signal ${signal}`)\n//     } else {\n//       log('info', `holochain process terminated with exit code ${code}`)\n//     }\n//     // g_canQuit = true;\n//     if (g_canQuit) {\n//       app.quit();\n//     }\n//   });\n//   /** Wait for holochain to boot up */\n//   log('info', 'holochain <-> waiting for magic ready string');\n//   const promise: Promise<void> = await new Promise(async (resolve, reject) => {\n//     const start_time = Date.now()\n//     let total_output = \"\"\n//     holochain_proc.stdout.on('data', (data) => {\n//       const output = data.toString();\n//       total_output += output\n//       log('info', 'holochain: ' + output);\n//       if(output.indexOf(HC_MAGIC_READY_STRING) > -1) {\n//         const regex = /###ADMIN_PORT:([0-9]*)###/gm;\n//         const match = regex.exec(total_output);\n//         //log('debug', {match});\n//         if (match === undefined || match === null || match.length === 0) {\n//           log('warn', 'ADMIN port not found in holochain total_output:');\n//           log('warn', {total_output});\n//           return;\n//         }\n//         g_adminPort = parseInt(match[1]);\n//         //log('info', {total_output});\n//         resolve();\n//       } else {\n//         log('info', 'holochain <- waiting for magic ready string');\n//       }\n//     });\n//     while(Date.now() - start_time < 60 * 1000) {\n//       await delay(100);\n//     }\n//     reject(new Error(\"Failed to retrieve holochain's magic ready string from child process\"))\n//   });\n//   /** Done */\n//   await promise;\n//   return holochain_proc;\n// }\n\n\n// /** * Make sure there is no outstanding holochain procs */\n// async function killHolochain(): Promise<void> {\n//   /** SIGTERM by default */\n//   let canWaitForHolochain = false;\n//   if(g_holochain_proc && g_holochain_proc.pid) {\n//     canWaitForHolochain = true;\n//     log('info', 'Killing holochain sub processes...');\n//     kill(g_holochain_proc.pid, function(err) {\n//       canWaitForHolochain = false;\n//       if(!err) {\n//         log('info', 'killed all holochain sub processes');\n//       } else {\n//         log('error', err)\n//       }\n//     });\n//   }\n//   let canWaitForKeystore = false;\n//   if(g_keystore_proc && g_keystore_proc.pid) {\n//     canWaitForKeystore = true;\n//     log('info', 'Killing lair-keystore sub processes...');\n//     kill(g_keystore_proc.pid, function(err) {\n//       canWaitForKeystore = false;\n//       if(!err) {\n//         log('info', 'killed all lair-keystore sub processes');\n//       } else {\n//         log('error', err)\n//       }\n//     });\n//   }\n//   /* Wait for the kill commands to complete */\n//   log('info', 'waiting...');\n//   const start_time = Date.now()\n//   while(canWaitForHolochain || canWaitForKeystore) {\n//     await delay(10);\n//     if (Date.now() - start_time > 5 * 1000) {\n//       log('error', 'Killing sub-processes TIMED-OUT. Aborted.');\n//       break;\n//     }\n//   }\n//   log('info', 'Killing sub-processes DONE.');\n// }\n\n\n// /**\n//  * Prepare conductor config and spawn holochain subprocess\n//  * @param canRegenerateConfig - Regenerate the conductor config before relaunching the holochain process.\n//  */\n// async function startConductorAndLoadPage(canRegenerateConfig: boolean): Promise<void> {\n//   //g_canQuit = false;\n//   await killHolochain(); // Make sure there is no outstanding Holochain & keystore procs\n//   g_lair_version = getKeystoreVersion(LAIR_KEYSTORE_BIN);\n//   g_keystore_proc = await spawnKeystore(LAIR_KEYSTORE_BIN, g_sessionStoragePath);\n//   //await sleep(2000);\n//   if (canRegenerateConfig) {\n//     generateConductorConfig(g_conductorConfigFilePath, g_sessionStoragePath, g_adminPort, g_networkSettings);\n//   }\n//   log('info', 'Launching conductor...');\n//   //g_canQuit = true;\n//\n//   let indexUrl;\n//   try {\n//     const res = pingBootstrap(g_networkSettings.bootstrapUrl)\n//     log('info', 'bootstrap result: ' + res)\n//     /** - Spawn Conductor */\n//     g_holochain_version = getHolochainVersion();\n//     // await sleep(1000); // Time buffer to make sure holochain process closed\n//     g_holochain_proc = await spawnHolochainProc();\n//     /** - Connect to Conductor and activate app */\n//     g_adminWs = await connectToAdmin(g_adminPort);\n//     const activeAppPort = await hasActivatedApp(g_adminWs);\n//     if(activeAppPort === 0) {\n//       // - Prompt for first UID\n//       if (!g_networkSettings.canMdns) {\n//           g_uid = '<my-network-access-key>';\n//           await promptUid(true, g_mainWindow);\n//       } else {\n//         addUid(\"local-mdns\")\n//       }\n//       await installApp(g_adminWs, g_uid);\n//       // log('debug','Attaching to app at ' + g_appPort + ' ...');\n//       g_appPort = await g_adminWs.attachAppInterface({port: undefined});\n//       log('debug', {g_appPort});\n//       g_appPort = g_appPort.port;\n//       log('info','App Interface attached: ' + g_appPort);\n//     } else {\n//       g_appPort = activeAppPort;\n//       /** - Prompt for UID selection or prefered UID if multiple uid found */\n//       if (g_uid === '' && g_uidList !== undefined && g_uidList.length > 0) {\n//         const maybe_uid = g_userSettings.get('uid');\n//         if (maybe_uid !== undefined) {\n//           g_uid = maybe_uid;\n//         } else {\n//           g_uid = g_uidList[0];\n//           if(g_uidList.length > 1) {\n//             await promptUidSelect(false);\n//           }\n//         }\n//       }\n//     }\n//     indexUrl = INDEX_URL + g_appPort + '&UID=' + g_uid;\n//     log('debug', indexUrl);\n//     g_dnaHash = await getDnaHash(g_adminWs, g_uid);\n//   } catch (err) {\n//     log('error', 'Conductor setup failed:');\n//     log('error',{err});\n//     //indexUrl = INDEX_URL;\n//     await g_mainWindow.loadURL(ERROR_URL);\n//     return;\n//     //// Better to kill app if holochain not connected\n//     //app.quit();\n//   }\n//   /** -- Check username -- */\n//   try\n//   {\n//     const installed_app_id = SNAPMAIL_APP_ID + '-' + g_uid;\n//     const appWs = await connectToApp(g_appPort);\n//     const appInfo = await appWs.appInfo({ installed_app_id }, 3000);\n//     log('debug', {appInfo});\n//     if (appInfo === null) {\n//       throw new Error(\"happ not installed in conductor: \" + installed_app_id)\n//     }\n//     g_cellId = appInfo.cell_data[0].cell_id;\n//     const username = await appWs.callZome({\n//         cap: null,\n//         cell_id: g_cellId,\n//         zome_name: \"snapmail\",\n//         fn_name: \"get_my_handle\",\n//         provenance: g_cellId[1],\n//         payload: undefined,\n//       }\n//       , 9999\n//     );\n//     log('debug', \"username found: \" + username);\n//     if (username === \"<noname>\") {\n//       const firstUsername = await promptFirstHandle(true);\n//       const result = await appWs.callZome({\n//           cap: null,\n//           cell_id: g_cellId,\n//           zome_name: \"snapmail\",\n//           fn_name: \"set_handle\",\n//           provenance: g_cellId[1],\n//           payload: firstUsername,\n//         }\n//         , 9999\n//       );\n//       log('debug', \"username set: \" + JSON.stringify(result));\n//     }\n//   } catch(err) {\n//     log('error', \"*** Calling zome for initial username failed.\");\n//     log('error', {err});\n//     await g_mainWindow.loadURL(ERROR_URL);\n//     return;\n//     //alert(\"Holochain failed.\\n Connection to holochain might be lost.\n//     // Reload App or refresh web page to attempt reconnection\");\n//   }\n//   /** -- trigger refresh once we know interfaces have booted up -- **/\n//   log('debug',\"Loading index.html: \" + indexUrl);\n//   try {\n//     await g_mainWindow.loadURL(indexUrl);\n//   } catch(err) {\n//     log('error', 'loadURL() failed:');\n//     log('error',{err});\n//   }\n// }\n\n\n\n/**\n *\n */\nasync function startMainWindow(splashWindow: BrowserWindow) {\n  /** Init conductor */\n  const opts = createHolochainOptions(g_uid, g_sessionDataPath, g_networkSettings)\n  log('info', JSON.stringify(opts))\n  const {statusEmitter, shutdown } = await initAgent(app, opts, BINARY_PATHS)\n  g_statusEmitter = statusEmitter;\n  g_shutdown = shutdown;\n  statusEmitter.on(STATUS_EVENT, async (state: string | StateSignal | Error) => {\n    //log('debug', \"STATUS EVENT: \" + stateSignalToText(state) + \" (\" + state + \")\")\n    switch (state) {\n      case StateSignal.IsReady:\n        log('debug', \"STATUS EVENT: IS READY\")\n        // Its important to create the window before closing the current one\n        // otherwise this triggers the 'all-windows-closed' event\n        g_mainWindow = await createMainWindow(g_appPort)\n        splashWindow.close()\n        g_mainWindow.show()\n        break\n      default:\n        if (splashWindow) {\n          splashWindow.webContents.send('status', stateSignalToText(state as StateSignal))\n        }\n    }\n  })\n  statusEmitter.on(APP_PORT_EVENT, (appPort: string | StateSignal | Error) => {\n    //log('debug', \"APP_PORT_EVENT: \" + appPort)\n    g_appPort = appPort as string;\n  })\n  statusEmitter.on(ERROR_EVENT, (error: string | StateSignal | Error) => {\n    const error_msg = error;\n    log('error', error_msg)\n    if (g_mainWindow == null && splashWindow) {\n      splashWindow.webContents.send('status', error_msg)\n    }\n  })\n  statusEmitter.on(HOLOCHAIN_RUNNER_QUIT, () => {\n    const msg = \"HOLOCHAIN_RUNNER_QUIT event received\"\n    log('warn', msg)\n    if (g_mainWindow) {\n      promptHolochainError(g_mainWindow, msg)\n    } else {\n      if (splashWindow) {\n        splashWindow.webContents.send('status', msg)\n      }\n    }\n    //app.quit()\n  })\n  statusEmitter.on(LAIR_KEYSTORE_QUIT, (e) => {\n    const msg = \"LAIR_KEYSTORE_QUIT event received\"\n    log('warn', msg)\n    if (g_mainWindow) {\n      promptHolochainError(g_mainWindow, msg)\n    } else {\n      if (splashWindow) {\n        splashWindow.webContents.send('status', msg)\n      }\n    }\n    //app.quit()\n  })\n}\n\n\n/**\n * This method will be called when Electron has finished initialization and is ready to create browser windows.\n * Some APIs can only be used after this event occurs.\n */\napp.on('ready', async () => {\n  log('debug', \"ELECTRON READY - \" + __dirname)\n  /** Load user settings */\n  g_userSettings = loadUserSettings(1920, 1080);\n  /** Show splashscreen */\n  const splashWindow = createSplashWindow()\n  /** init app */\n  {\n    const {sessionDataPath, uidList} = initApp(USER_DATA_PATH, APP_DATA_PATH, DNA_VERSION_FILENAME, RUNNING_ZOME_HASH_FILEPATH, UID_LIST_FILENAME);\n    g_sessionDataPath = sessionDataPath\n    g_uidList = uidList\n    g_dnaVersion = loadDnaVersion(sessionDataPath)\n    /** Load network settings */\n    const maybeNetworkSettings = loadNetworkConfig(g_sessionDataPath)\n    if (maybeNetworkSettings) {\n      g_networkSettings = maybeNetworkSettings;\n    }\n  }\n  /** Determine starting UID */\n  const maybeUid = g_userSettings.get(\"lastUid\")\n  const hasUid = maybeUid? g_uidList.includes(maybeUid): false;\n  if (hasUid) {\n    g_uid = maybeUid\n  } else {\n    if (g_uidList.length == 0) {\n      while (!splashWindow.isVisible()) {\n        await delay(20)\n      }\n      await promptUid(true, splashWindow);\n    }\n    g_uid = g_uidList[0]\n    g_userSettings.set('lastUid', g_uid)\n  }\n  log('debug', \"g_uid: \" + g_uid);\n  g_sessionDataPath = path.join(g_sessionDataPath, g_uid)\n  log('debug', \"g_sessionDataPath: \" + g_sessionDataPath);\n\n  /** Create sys tray */\n  g_tray = createTray();\n  g_tray.setToolTip('Snapmail v' + app.getVersion());\n  const menu = Menu.buildFromTemplate(trayMenuTemplate);\n  g_tray.setContextMenu(menu);\n\n  /** Start holochain and main window */\n  await startMainWindow(splashWindow)\n\n  /** -- Check username -- */\n  let time = 0;\n  while (!g_startingHandle && time < 10 * 1000) {\n    await delay(100);\n    time += 100;\n  }\n  log('debug', \"g_startingHandle found: \" + g_startingHandle);\n})\n\n\n\n// /**\n//  * This method will be called when Electron has finished initialization and is ready to create browser windows.\n//  * Some APIs can only be used after this event occurs.\n//  */\n// app.on('ready', async function () {\n//   log('info', 'Electron App ready. Init app...');\n//\n//   /** Read zome_hash.txt in app folder */\n//   g_zomeHash = loadRunningZomeHash();\n//   log('info', \"SNAPMAIL ZOME HASH: \" + g_zomeHash);\n//   /** setup storage folder */\n//   setupStorage(g_sessionStoragePath, g_zomeHash)\n//\n//   /** -- Read Globals from current conductor config -- */\n//   {\n//     const { networkSettings, adminPort } = loadConductorConfig(g_conductorConfigFilePath);\n//     g_networkSettings = networkSettings;\n//     g_adminPort = adminPort;\n//   }\n//   g_uidList = loadUidList(g_uidListFilePath);\n//\n//   /** Get user Settings */\n//   const { width, height } = screen.getPrimaryDisplay().workAreaSize;\n//   const default_width = Math.min(width, 1400);\n//   const default_height = Math.min(height, 950);\n//\n//   const x = Math.floor((width - default_width) / 2);\n//   const y = Math.floor((height - default_height) / 2);\n//\n//   g_userSettings = new SettingsStore({\n//     /** We'll call our data file 'user-preferences' */\n//     configName: 'user-preferences',\n//     defaults: {\n//       windowBounds: { width: default_width, height: default_height },\n//       canAutoLaunch: false,\n//       windowPosition: {x, y},\n//       dontConfirmOnExit: false,\n//       canNotify: false,\n//     }\n//   });\n//\n//   /** Check AutoLaunch */\n//   updateAutoLaunchSetting();\n//\n//   /** Modify main menu */\n//   const mainMenu = Menu.getApplicationMenu();\n//   const item = mainMenu.getMenuItemById('launch-at-startup');\n//   item.checked = g_userSettings.get('canAutoLaunch');\n//\n//   item = mainMenu.getMenuItemById('notify-msg');\n//   item.checked = g_userSettings.get('canNotify');\n//\n//   /** Create sys tray */\n//   g_tray = createTray();\n//   g_tray.setToolTip('SnapMail v' + app.getVersion());\n//   const menu = Menu.buildFromTemplate(trayMenuTemplate);\n//   g_tray.setContextMenu(menu);\n//\n//   /** Create main window */\n//   g_mainWindow = createWindow();\n//\n//   /** Load splashscreen */\n//   try {\n//     await g_mainWindow.loadURL(SWITCHING_URL);\n//   } catch(err) {\n//     log('error', 'loadURL() failed:');\n//     log('error',{err});\n//   }\n//\n//   /** Start Conductor */\n//   /** if bootstrapUrl not set, prompt it, otherwise */\n//   if(g_networkSettings.bootstrapUrl === \"\") {\n//     g_networkSettings.bootstrapUrl = DEFAULT_BOOTSTRAP_URL;\n//     await promptNetworkType(true);\n//     log('debug', 'network type prompt done. Can MDNS: ' + g_networkSettings.canMdns);\n//     if (!g_networkSettings.canMdns) {\n//       //// Use default bootstrap url\n//       // await promptBootstrapUrl(true);\n//     } else {\n//       const menu = Menu.getApplicationMenu();\n//       menu.getMenuItemById('join-network').enabled = false;\n//       menu.getMenuItemById('switch-network').enabled = false;\n//       menu.getMenuItemById('change-bootstrap').enabled = false;\n//     }\n//   }\n//   await startConductorAndLoadPage(true);\n// });\n\n\n/**\n * This event will be emitted inside the primary instance of your application\n * when a second instance has been executed.\n * and calls app.requestSingleInstanceLock().\n */\napp.on('second-instance', (_event) => {\n  log('warn','\\n\\n second-instance detected !!! \\n\\n')\n});\n\n\n/**\n * When main window has been closed and the application will quit, destroy conductor subprocess\n */\napp.on('will-quit', (event) => {\n  log('debug','*** App \"will-quit\"');\n  if (!g_canQuit) {\n    event.preventDefault();\n  }\n});\n\n\n/**\n * Quit when all windows are closed.\n */\napp.on('window-all-closed', async () => {\n  log('info', 'APP EVENT \"window-all-closed\"')\n  if (process.platform !== 'darwin') {\n    await tryToShutdown();\n    app.quit()\n  }\n});\n\n\n/** */\napp.on('activate', async () => {\n  log('debug','*** App \"activate\"');\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    await createMainWindow(g_appPort)\n  }\n});\n\n\n/** */\napp.on('before-quit', function () {\n  log('debug','*** App \"before-quit\"');\n  g_canQuit = true;\n});\n\n\n/**\n *\n */\nasync function tryToShutdown() {\n  try {\n    log('debug', {g_shutdown})\n    if (g_shutdown) {\n      log('info', 'calling g_shutdown()...');\n      await g_shutdown();\n    }\n  } catch (e) {\n    log('error', 'g_shutdown() failed: '+ e);\n  }\n}\n\n\n\nasync function restart() {\n  log('debug', \"*** Restarting...\");\n  g_mainWindow = null;\n  //g_statusEmitter = null;\n  //await tryToShutdown();\n  log('debug', \"*** Restarting: RELAUNCH\");\n\n  if (app.isPackaged && process.env.APPIMAGE) {\n    log('debug', \"*** ... with APPIMAGE: \" + process.env.APPIMAGE);\n    //log('debug', \"*** ... with execPath: \" + process.execPath);\n\n    // // Pipe errors if console.log() is called + plus possible other issues when relaunching again\n    // const options: RelaunchOptions = {\n    //   args: process.argv.slice(1).concat(['--relaunch']),\n    //   execPath: process.execPath\n    // };\n    // execFile(process.env.APPIMAGE, options.args);\n    // app.quit();\n    // return;\n\n    // FUSE can still fail\n    const options: RelaunchOptions = {\n      execPath: process.env.APPIMAGE,\n      args:['--appimage-extract-and-run']\n    };\n    //console.log({options})\n    app.relaunch(options)\n  } else {\n    app.relaunch()\n  }\n  app.exit(0)\n}\n\n\n/**********************************************************************************************************************/\n/*  PROMPTS\n/**********************************************************************************************************************/\n\n/**\n * @returns false if user cancelled\n */\nasync function promptNetworkType(canExitOnCancel: boolean): Promise<boolean> {\n  const r = await prompt({\n    title: 'Select network type',\n    height: 180,\n    width: 300,\n    alwaysOnTop: true,\n    label: 'Choose network type:',\n    icon: CURRENT_DIR + FAVICON_PATH,\n    type: 'select',\n    selectOptions: {\n      'false': 'Bootstrap server (WAN)',\n      'true': 'mDNS (LAN)',\n    }\n  });\n  if(r === null) {\n    log('debug','user cancelled. Can exit: ' + canExitOnCancel);\n    if (canExitOnCancel) {\n      app.quit();\n    }\n  } else {\n    log('debug','promptNetworkType result: ' + r);\n    g_networkSettings.canMdns = r === 'true';\n    saveNetworkConfig(g_sessionDataPath, g_networkSettings);\n  }\n  return r !== null\n}\n\n\n/**\n * @returns false if user cancelled\n */\nasync function promptBootstrapUrl(canExitOnCancel: boolean): Promise<boolean> {\n  const r = await prompt({\n    title: 'SnapMail: Bootstrap Server URL',\n    height: 180,\n    width: 600,\n    alwaysOnTop: true,\n    label: 'URL:',\n    icon: CURRENT_DIR + FAVICON_PATH,\n    value: g_networkSettings.bootstrapUrl,\n    inputAttrs: {\n      required: 'true',\n      type: 'url'\n    },\n    type: 'input'\n  });\n  if(r === null) {\n    log('debug','user cancelled. Can exit: ' + canExitOnCancel);\n    if (canExitOnCancel) {\n      app.quit();\n    }\n  } else {\n    log('debug','result: ' + r);\n    g_networkSettings.bootstrapUrl = r;\n    saveNetworkConfig(g_sessionDataPath, g_networkSettings);\n    const res = pingBootstrap(r)\n    log('info', 'bootstrap result: ' + res)\n  }\n  return r !== null\n}\n\n\n/** */\nasync function promptFirstHandle(): Promise<string> {\n  const r = await prompt({\n    title: 'SnapMail: Starting Username',\n    height: 180,\n    width: 500,\n    alwaysOnTop: true,\n    label: 'Username:',\n    icon: CURRENT_DIR + FAVICON_PATH,\n    value: \"<noname>\",\n    inputAttrs: {\n      required: 'true',\n      minlength: \"3\",\n      pattern: \"[a-zA-Z0-9\\-_.]+\",\n      type: 'string'\n    },\n    type: 'input'\n  });\n  if(r === null) {\n    log('debug','user cancelled. Exiting');\n    app.quit();\n  }\n  return r!;\n}\n\n\n/**\n * @returns false if user cancelled\n */\nasync function promptUid(canExitOnCancel: boolean, parentBrowserWindow: BrowserWindow): Promise<boolean> {\n  const r = await prompt({\n    title: 'SnapMail: Join new Network',\n    height: 180,\n    width: 500,\n    alwaysOnTop: true,\n    label: 'Network Access Key:',\n    icon: CURRENT_DIR + FAVICON_PATH,\n    value: g_uid,\n    //parentBrowserWindow,\n    inputAttrs: {\n      minlength: \"2\",\n      required: 'true',\n      pattern: \"[a-zA-Z0-9\\-_.]+\",\n      type: 'string'\n    },\n    type: 'input'\n  });\n  if(r === null) {\n    log('debug','user cancelled. Can exit: ' + canExitOnCancel);\n    if (canExitOnCancel) {\n      app.quit();\n    }\n  } else {\n    let sessionPath = g_sessionDataPath;\n    if (g_uid) {\n      sessionPath = path.join(g_sessionDataPath, \"../\")\n    }\n    const succeeded = addUidToDisk(r, sessionPath, UID_LIST_FILENAME);\n    if (succeeded) {\n      g_uid = r\n      g_uidList.push(r)\n      g_userSettings.set('lastUid', g_uid);\n    }\n  }\n  return r !== null\n}\n\n\n// function addUid(newUid: string): void {\n//   log('debug','addUid(): ' + newUid);\n//   g_uid = newUid;\n//   try {\n//     fs.appendFileSync(g_uidListFilePath, g_uid + '\\n');\n//     g_uidList.push(g_uid);\n//   } catch (err) {\n//     log('error','Writing config file failed: ' + err);\n//   }\n// }\n\n\n/**\n * @returns false if user cancelled\n */\nasync function promptUidSelect(canExitOnCancel: boolean): Promise<boolean> {\n  const selectOptions: any = {};\n  const uidSet = new Set(g_uidList)\n  const uniq = Array.from(uidSet.values());\n  for (const uid of uniq) {\n    selectOptions[uid] = uid;\n  }\n  const r = await prompt({\n    title: 'Select network',\n    height: 180,\n    width: 300,\n    alwaysOnTop: true,\n    label: 'Choose network:',\n    value: g_uid,\n    icon: CURRENT_DIR + FAVICON_PATH,\n    type: 'select',\n    selectOptions,\n  });\n  if(r === null) {\n    log('debug','user cancelled. Can exit: ' + canExitOnCancel);\n    if (canExitOnCancel) {\n      app.quit();\n    }\n  } else {\n    log('debug','promptUidSelect result: ' + r);\n    g_uid = r;\n    g_userSettings.set('uid', g_uid);\n  }\n  return r !== null\n}\n\n/**\n * @returns false if user cancelled\n */\nasync function promptCanProxy(): Promise<boolean> {\n  const {response} = await dialog.showMessageBox(g_mainWindow!, {\n    title: `Proxy`,\n    message: \"Do you want to use a proxy?\",\n    defaultId: 0,\n    buttons: ['Yes', 'No'],\n    type: \"question\",\n    noLink: true,\n  });\n  log('warn', 'promptCanProxy: ' + response);\n  g_networkSettings.canProxy = response === 0;\n  return g_networkSettings.canProxy;\n}\n\n\n/**\n * @returns false if user cancelled\n */\nasync function promptProxyUrl(canExitOnCancel: boolean): Promise<boolean> {\n  const r = await prompt({\n    title: 'Proxy Server URL',\n    height: 180,\n    width: 800,\n    alwaysOnTop: true,\n    label: 'URL:',\n    icon: CURRENT_DIR + FAVICON_PATH,\n    value: g_networkSettings.proxyUrl,\n    inputAttrs: {\n      required: 'true',\n      type: 'url'\n    },\n    type: 'input'\n  });\n  if(r === null) {\n    log('debug','user cancelled. Can exit: ' + canExitOnCancel);\n    if (canExitOnCancel) {\n      app.quit();\n    }\n  } else {\n    log('debug','result: ' + r);\n    g_networkSettings.proxyUrl = r;\n    saveNetworkConfig(g_sessionDataPath, g_networkSettings);\n  }\n  return r !== null\n}\n\n\n/**\n *\n */\nasync function showAbout() {\n  log(\"info\", `[${RUNNER_VERSION}] DNA hash of \"${g_uid}\": ${g_dnaIdB64}\\n`)\n  await dialog.showMessageBoxSync(g_mainWindow!, {\n    //width: 900,\n    title: `About ${app.getName()}`,\n    message: `${app.getName()} - v${app.getVersion()}`,\n    detail: `A minimalist email app on Holochain from Glass Bead Software\\n\\n`\n      + `DNA Version:\\n${g_dnaVersion}\\n`\n      + `DNA hash of \"${g_uid}\":\\n${g_dnaIdB64}\\n\\n`\n      + '' + RUNNER_VERSION + ''\n      + '' + LAIR_VERSION + `\\n`,\n    buttons: ['OK'],\n    type: \"info\",\n    //iconIndex: 0,\n    //icon: CONFIG.ICON,\n    //icon: app.getFileIcon(path)\n  });\n}\n\n\n/**\n *\n */\nasync function confirmExit(): Promise<boolean> {\n  const dontConfirmOnExit = g_userSettings.get(\"dontConfirmOnExit\");\n  //let r = await prompt({\n  const {response, checkboxChecked} = await dialog.showMessageBox(g_mainWindow!, {\n    //width: 800,\n    title: `Confirm Exit`,\n    message: \"Incoming messages will not arrive until you relaunch SnapMail.\\n\" +\n      \"Are you sure you want to exit?\",\n    defaultId: 2,\n    buttons: ['Just minimize Snapmail', 'Cancel', 'Exit'],\n    type: \"question\",\n    checkboxLabel: \"Don't ask again, just exit\",\n    checkboxChecked: dontConfirmOnExit,\n    noLink: true,\n    //icon: app.getFileIcon(path)\n  });\n\n  //log('silly', response);\n  //log('silly', checkboxChecked);\n  g_userSettings.set(\"dontConfirmOnExit\", checkboxChecked);\n\n  switch (response) {\n    case 0: {\n      g_mainWindow!.hide();\n      break;\n    }\n    case 2: {\n      return true;\n      //break;\n    }\n    default:\n  }\n  return false;\n}\n\n\n/**\n *\n */\nasync function promptHolochainError(browserWindow: BrowserWindow, msg: string) {\n  await dialog.showMessageBoxSync(browserWindow, {\n    //width: 900,\n    title: `Fatal Error`,\n    message: `Holochain not running`,\n    detail: `${msg}`,\n    buttons: ['OK'],\n    type: \"error\",\n  });\n}\n\n\n/**********************************************************************************************************************/\n/*  MENUS\n/**********************************************************************************************************************/\n\nconst optionsMenuTemplate: Array<MenuItemConstructorOptions> = [\n  {\n    id: 'launch-at-startup',\n    label: 'Launch at startup',\n    type: 'checkbox',\n    click: function (menuItem, _browserWindow, _event) {\n      updateAutoLaunchSetting(menuItem.checked);\n    },\n  },\n  {\n    id: 'notify-msg',\n    label: 'Allow Notifications',\n    type: 'checkbox',\n    click: function (menuItem, _browserWindow, _event) {\n      updateNotificationSetting(menuItem.checked);\n    },\n  },\n];\n\n\n/**\n * In this file you can include the rest of your app's specific main process code.\n * You can also put them in separate files and require them here.\n */\nconst networkMenuTemplate: Array<MenuItemConstructorOptions> = [\n  {\n    id: 'join-network',\n    label: 'Join new Network',\n    click: async function (menuItem, browserWindow, _event) {\n      const changed = await promptUid(false, g_mainWindow!);\n      if (changed) {\n        await restart();\n      }\n    },\n  },\n  {\n    id: 'switch-network',\n    label: 'Switch Network',\n    click: async function (menuItem, _browserWindow, _event) {\n      const changed = await promptUidSelect(false);\n      if (changed) {\n        await restart();\n      }\n    },\n  },\n  {\n    type: 'separator'\n  },\n  {\n    label: 'Change Network type',\n    click: async function () {\n      const changed = await promptNetworkType(false);\n      if (changed) {\n        await restart();\n      }\n    },\n  },\n  {\n    id: 'change-bootstrap',\n    label: 'Change Bootstrap Server',\n    click: async function () {\n      const changed = await promptBootstrapUrl(false);\n      if (changed) {\n        await restart();\n      }\n    }\n  },\n  {\n    label: 'Change Proxy Server',\n    click: async function () {\n      const prevCanProxy = g_networkSettings.canProxy;\n      const canProxy = await promptCanProxy();\n      const proxyChanged = prevCanProxy !== canProxy;\n      if (canProxy) {\n        const changed = await promptProxyUrl(false);\n        if(changed || proxyChanged) {\n          await restart();\n        }\n      } else  {\n        if(proxyChanged) {\n          saveNetworkConfig(g_sessionDataPath, g_networkSettings);\n          await restart();\n        }\n      }\n    }\n  },\n];\n\n\n/** */\nconst debugMenuTemplate: Array<MenuItemConstructorOptions> = [\n  // {\n  //   label: 'Dump logs', click: function() {\n  //     log('debug', {process})\n  //   }\n  // },\n  {\n    label: 'Open Config Folder',\n    click: function () {\n      shell.openExternal('file://' + CONFIG_PATH);\n      //shell.openItem(CONFIG_PATH);\n    },\n  },\n  {\n    label: 'Open Log File',\n    click: function () {\n      shell.openExternal('file://' + electronLogger.transports.file.file);\n      //shell.openItem(logger.transports.file.file);\n    },\n  },\n  {\n    label: 'devTools',\n    role: \"toggleDevTools\",\n    // click: function () {\n    //   g_mainWindow.webContents.openDevTools();\n    // },\n  },\n  // {\n  //   label: 'Show PATHS',\n  //   click: function () {\n  //     dialog.showMessageBoxSync(g_mainWindow, {\n  //       type: 'info',\n  //       title: 'Constants',\n  //       message: 'BIN_PATH: ' + BIN_PATH + '\\n' + 'process.env.path: ' + JSON.stringify(process.env.PATH),\n  //     });\n  //   },\n  // },\n  {\n    id: 'debug-network',\n    label: 'Debug network',\n    click: async function () {\n      const currentURL = g_mainWindow!.webContents.getURL();\n      const currentFilename = currentURL.substring(currentURL.lastIndexOf('/')+1);\n      const networkFilename = NETWORK_URL.substring(NETWORK_URL.lastIndexOf('/')+1);\n      //console.log({currentFilename})\n      if (networkFilename != currentFilename) {\n        await g_mainWindow!.loadURL(NETWORK_URL);\n        //const succeeded = pingBootstrap(g_bootstrapUrl);\n      } else {\n        const indexUrl = INDEX_URL + g_appPort + '&UID=' + g_uid;\n        await g_mainWindow!.loadURL(indexUrl);\n      }\n    }\n  },\n  {\n    label: 'Restart Conductor',\n    click: async function () {\n      await restart()\n    }\n  },\n  {\n    label: 'Reload window',\n    accelerator: 'F5',\n    click: async function () {\n      g_mainWindow!.reload();\n    }\n  },\n\n];\n\n\n/** */\nconst mainMenuTemplate: Array<MenuItemConstructorOptions> = [\n  {\n    label: 'File', submenu: [{\n        label:`Check for Update`,\n      click: function (menuItem: MenuItem, browserWindow: Electron.BrowserWindow | undefined, event: Electron.KeyboardEvent) {\n          //log('info', menuItem)\n          checkForUpdates(menuItem);\n        }\n      }, {\n      label: 'Quit',\n      //accelerator: 'Command+Q',\n      click: async function () {\n        const dontConfirmOnExit = g_userSettings.get(\"dontConfirmOnExit\");\n        if (dontConfirmOnExit) {\n          app.quit();\n        } else {\n          const canExit = await confirmExit();\n          if (canExit) {\n            app.quit();\n          }\n        }\n      },\n    },\n    ],\n  },\n  {\n    label: 'Network',\n    submenu: networkMenuTemplate,\n  },\n  {\n    label: 'Options',\n    submenu: optionsMenuTemplate,\n  },\n  {\n    label: 'Debug',\n    submenu: debugMenuTemplate,\n  },\n  {\n    label: 'Help', submenu: [{\n      label: 'Report bug / issue',\n      click: function (menuItem, _browserWindow, _event) {\n        shell.openExternal(REPORT_BUG_URL)\n        //g_mainWindow.loadURL(REPORT_BUG_URL)\n       }\n      },\n      {\n        type: 'separator'\n      },\n      {\n      label: 'About',\n      //accelerator: 'Command+A',\n      click: async function (menuItem, _browserWindow, _event) {\n        await showAbout();\n      },\n    },],\n  },\n];\n\n\n/**\n *\n */\nconst trayMenuTemplate: Array<MenuItemConstructorOptions> = [\n  { label: 'Tray / Untray', click: function (menuItem, _browserWindow, _event) {\n      g_mainWindow!.isVisible()? g_mainWindow!.hide() : g_mainWindow!.show();\n    }\n  },\n  //{ label: 'Settings', submenu: networkMenuTemplate },\n  {\n    label: 'Switch network',\n    click: async function (menuItem, _browserWindow, _event) {\n      const changed = await promptUidSelect(false);\n      if(changed) {\n        await restart()\n      }\n    }\n  },\n  //{ label: 'Debug', submenu: debugMenuTemplate },\n  { type: 'separator' },\n  { label: 'About', click: async function (menuItem, _browserWindow, _event) { await showAbout(); } },\n  { type: 'separator' },\n  { label: 'Exit', role: 'quit' }\n];\n\n\n/**********************************************************************************************************************/\n/*  FINALIZE\n/**********************************************************************************************************************/\n\nMenu.setApplicationMenu(Menu.buildFromTemplate(mainMenuTemplate));\n"]}